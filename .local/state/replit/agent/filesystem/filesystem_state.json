{"file_contents":{"README.md":{"content":"# ThreeGamificationUI\n\nA real-time 3D bot architecture visualization system built with Angular and Three.js featuring reactive data flows and gamification elements.\n\n## Project Overview\n\nThreeGamificationUI is an interactive 3D visualization platform that displays bot networks in real-time using Angular, Three.js, and Socket.io. The system features:\n\n- **3D Visualization**: Interactive Three.js scene with central Socket.io hub and 8 bot positions on cardinal spirals\n- **Real-time Communication**: RxJS-Socket.io bridge for reactive data flow\n- **Bot Management**: Interactive UI for controlling bot states and operations\n- **Message Streaming**: Real-time message panel with channel filtering\n- **Performance Monitoring**: Live FPS monitoring and system health metrics\n\n## Architecture\n\n","size_bytes":792},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"karma.conf.js":{"content":"// Karma configuration file, see link for more information\n// https://karma-runner.github.io/1.0/config/configuration-file.html\n\nmodule.exports = function (config) {\n  config.set({\n    basePath: '',\n    frameworks: ['jasmine', '@angular-devkit/build-angular'],\n    plugins: [\n      require('karma-jasmine'),\n      require('karma-chrome-headless'),\n      require('karma-jasmine-html-reporter'),\n      require('karma-coverage'),\n      require('@angular-devkit/build-angular/plugins/karma')\n    ],\n    client: {\n      clearContext: false // leave Jasmine Spec Runner output visible in browser\n    },\n    coverageReporter: {\n      dir: require('path').join(__dirname, './coverage/threegamification-ui'),\n      subdir: '.',\n      reporters: [\n        { type: 'html' },\n        { type: 'text-summary' }\n      ]\n    },\n    reporters: ['progress', 'kjhtml'],\n    browsers: ['ChromeHeadless'],\n    restartOnFileChange: true\n  });\n};\n","size_bytes":924},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ThreeGamificationUI - Real-time 3D Bot Visualization Platform\n\n## Overview\n\nThreeGamificationUI is an interactive 3D visualization platform that displays bot networks in real-time using Angular, Three.js, and Socket.io. The system features a central Socket.io hub with 8 bot positions arranged on cardinal spirals, providing real-time communication through RxJS-Socket.io bridge, interactive UI for controlling bot states, message streaming with channel filtering, and live performance monitoring.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Angular (latest) with standalone components\n- **3D Rendering**: Three.js for WebGL-based 3D visualization\n- **Reactive Programming**: RxJS for data flow management and reactive streams\n- **UI Components**: Custom Angular components with CSS styling and animations\n- **Development Tools**: Angular CLI, TypeScript, Karma/Jasmine for testing\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript\n- **Real-time Communication**: Socket.io server for WebSocket connections\n- **Build System**: Vite for development and production builds\n- **Module System**: ES modules with modern JavaScript features\n\n### Data Flow and Communication\n- **RxJS-Socket.io Bridge**: Custom bridge connecting Socket.io events to RxJS Observables\n- **Channel-based Messaging**: Three distinct channels (Sys, App, UI) for message categorization\n- **Room Management**: Socket.io rooms for organizing bot connections\n- **Reactive Pipeline**: Observable streams for real-time data transformation and filtering\n\n### 3D Scene Architecture\n- **Scene Layout**: Central sphere representing Socket.io hub with 8 bot positions on cardinal spirals (North, South, East, West - 2 positions each)\n- **Animation System**: Curved trajectories for message visualization using THREE.Curve\n- **Performance Optimization**: Instanced rendering, object pooling, and LOD management\n- **Camera Controls**: Orbital navigation with zoom and rotation controls\n\n### Component Structure\n- **Core Services**: Bridge, Socket service, Three.js scene management\n- **Feature Modules**: Bot management, message panel, demo client\n- **Shared Utilities**: Three.js helpers, models, interfaces\n- **Demo System**: External client for testing and demonstration scenarios\n\n### State Management\n- **Reactive State**: BehaviorSubjects and Observables for component state\n- **Centralized Services**: Angular services as state managers\n- **Real-time Updates**: Automatic UI updates through reactive data binding\n\n## External Dependencies\n\n### Core Dependencies\n- **Angular Framework**: @angular/core, @angular/common, @angular/platform-browser\n- **Three.js**: 3D graphics library for WebGL rendering\n- **Socket.io**: Real-time WebSocket communication (client and server)\n- **RxJS**: Reactive extensions for asynchronous programming\n\n### Development Dependencies\n- **Build Tools**: Angular CLI, Vite, TypeScript compiler\n- **Testing**: Karma, Jasmine, Cypress (planned for e2e)\n- **Development Server**: Express.js with middleware support\n\n### UI and Styling\n- **React Three.js**: @react-three/fiber, @react-three/drei, @react-three/postprocessing\n- **UI Components**: Radix UI components for React integration\n- **Styling**: Tailwind CSS, PostCSS, custom CSS animations\n- **Fonts**: Inter font family via Fontsource\n\n### Database and Storage\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database Driver**: Neon Database serverless PostgreSQL\n- **Schema Management**: Drizzle Kit for migrations and schema management\n\n### Utility Libraries\n- **Data Query**: TanStack React Query for data fetching\n- **Validation**: Zod for runtime type validation\n- **Utilities**: clsx, class-variance-authority for styling utilities\n- **State Management**: Zustand (referenced in React components)\n\n### Audio and Media\n- **Audio Support**: Vite configuration includes audio file support (.mp3, .ogg, .wav)\n- **3D Assets**: Support for GLTF/GLB model files\n- **Performance**: GLSL shader support via vite-plugin-glsl","size_bytes":4120},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"task_completion_tracker.md":{"content":"# Task Progress\n\n## Completed ✓\n- ✓ Install Angular dependencies and CLI\n\n## In Progress →\n- → Update vite configuration to serve Angular application from src/ directory\n\n## Pending\n- Update package.json scripts to run Angular app properly\n- Resolve LSP diagnostics in Angular application files\n- Restart the application and verify Angular app loads correctly","size_bytes":367},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"attached_assets/MASTER_CHECKLIST_1756831469869.md":{"content":"# MASTER CHECKLIST - ThreeGamificationUI\r\n**Proyecto:** Aplicación Angular + Three.js con Bridge RxJS-Socket.io  \r\n**Versión:** oe1_v001  \r\n**Objetivo:** Demo funcional de visualización 3D de arquitectura de bots con comunicación reactiva\r\n\r\n## Estado General del Proyecto\r\n- [ ] **Fase 1**: Arquitectura y Bridge RxJS-Socket.io *(Iteraciones 1-2)*\r\n- [ ] **Fase 2**: Componentes Angular y UI *(Iteraciones 3-4)*\r\n- [ ] **Fase 3**: Escena Three.js y Renderizado *(Iteraciones 5-6)*\r\n- [ ] **Fase 4**: Pipeline de Datos y Integración *(Iteraciones 7-8)*\r\n- [ ] **Fase 5**: Demo, Testing y Documentación *(Iteraciones 9-10)*\r\n\r\n## Próxima Iteración a Trabajar\r\n**→ ITERACIÓN 01** - [docs/iteration_01.md](docs/iteration_01.md)\r\n\r\n## Checklist de Iteraciones Completadas\r\n- [ ] **Iteración 01**: Setup inicial y arquitectura base\r\n- [ ] **Iteración 02**: Bridge RxJS-Socket.io completo\r\n- [ ] **Iteración 03**: Componentes Angular base\r\n- [ ] **Iteración 04**: UI avanzada y filtros\r\n- [ ] **Iteración 05**: Escena Three.js básica\r\n- [ ] **Iteración 06**: Animaciones y trayectorias\r\n- [ ] **Iteración 07**: Pipeline de datos\r\n- [ ] **Iteración 08**: Integración completa\r\n- [ ] **Iteración 09**: Demo y simulación\r\n- [ ] **Iteración 10**: Testing y documentación final\r\n\r\n## Entregables Finales\r\n- [ ] Bridge RxJS-Socket.io funcional\r\n- [ ] Componentes Angular completos\r\n- [ ] Escena Three.js con animaciones\r\n- [ ] Pipeline de datos reactivo\r\n- [ ] Demo funcional\r\n- [ ] Suite de tests completa\r\n- [ ] Documentación técnica\r\n\r\n## Notas de Sesión\r\n*Actualizar al final de cada sesión de trabajo*\r\n\r\n**Última actualización:** [Fecha]  \r\n**Progreso actual:** Setup inicial  \r\n**Próximos pasos:** Iniciar iteración 01\r\n","size_bytes":1748},"attached_assets/iteration_01_1756831481523.md":{"content":"# Iteración 01 - Setup Inicial y Arquitectura Base\r\n**Fase:** 1 - Arquitectura y Bridge RxJS-Socket.io  \r\n**Duración estimada:** 2.5 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Configurar proyecto Angular con dependencias Three.js y Socket.io\r\n- [ ] Definir estructura de carpetas modular\r\n- [ ] Implementar configuración base del bridge RxJS-Socket.io\r\n- [ ] Establecer servidor Socket.io de desarrollo\r\n\r\n## Entregables\r\n1. **Proyecto Angular**: Configurado con Angular CLI, dependencias instaladas\r\n2. **Estructura de carpetas**: Organización modular según plan maestro\r\n3. **Bridge básico**: Esqueleto del bridge RxJS-Socket.io con tipos TypeScript\r\n4. **Servidor Socket.io**: Configuración básica para desarrollo local\r\n\r\n## Fase 1: Análisis y Planificación (20 min)\r\n- [ ] Revisar requisitos técnicos del plan maestro\r\n- [ ] Definir estructura de carpetas detallada\r\n- [ ] Planificar configuración de dependencias\r\n- [ ] Crear lista de interfaces TypeScript necesarias\r\n\r\n## Fase 2: Implementación Core (90 min)\r\n- [ ] Crear proyecto Angular con `ng new threegamification-ui`\r\n- [ ] Instalar dependencias: Three.js, Socket.io-client, RxJS\r\n- [ ] Configurar estructura de carpetas:\r\n  ```\r\n  src/\r\n  ├── app/\r\n  │   ├── core/\r\n  │   │   ├── bridge/\r\n  │   │   │   └── rxjs-bridge.ts\r\n  │   │   └── services/\r\n  │   ├── features/\r\n  │   │   ├── bot-management/\r\n  │   │   └── message-panel/\r\n  │   ├── shared/\r\n  │   │   ├── models/\r\n  │   │   └── three/\r\n  │   └── demo/\r\n  ```\r\n- [ ] Implementar esqueleto del bridge RxJS-Socket.io\r\n- [ ] Crear servidor Socket.io básico (`server/socket-server.ts`)\r\n- [ ] Configurar Docker Compose para desarrollo\r\n\r\n## Fase 3: Testing y Validación (30 min)\r\n- [ ] Verificar compilación sin errores\r\n- [ ] Probar conexión Socket.io básica\r\n- [ ] Validar estructura de tipos TypeScript\r\n- [ ] Crear test de conexión bridge-servidor\r\n\r\n## Fase 4: Integración y Refinamiento (20 min)\r\n- [ ] Configurar scripts npm para desarrollo\r\n- [ ] Optimizar configuración webpack para Three.js\r\n- [ ] Revisar estructura de imports y exports\r\n- [ ] Documentar configuración de entorno\r\n\r\n## Fase 5: Documentación y Cierre (10 min)\r\n- [ ] Crear README.md inicial del proyecto\r\n- [ ] Documentar comandos de setup y desarrollo\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar datos para iteración 02\r\n\r\n## Dependencias\r\n**Requiere completadas:** Ninguna (iteración inicial)  \r\n**Bloquea a:** Iteración 02, 03\r\n\r\n## Notas Técnicas\r\n- Usar Angular 17+ con standalone components\r\n- Configurar Three.js con WebGL renderer\r\n- Socket.io client v4.x con tipado TypeScript\r\n- RxJS v7+ con operators modernos\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"01\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"setup_angular_project\", \"install_dependencies\", \"create_folder_structure\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":3030},"attached_assets/iteration_02_1756831481524.md":{"content":"# Iteración 02 - Bridge RxJS-Socket.io Completo\r\n**Fase:** 1 - Arquitectura y Bridge RxJS-Socket.io  \r\n**Duración estimada:** 3 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Implementar bridge RxJS-Socket.io completo con rooms y canales\r\n- [ ] Desarrollar sistema de manejo de eventos tipado\r\n- [ ] Implementar reconexión automática y gestión de errores\r\n- [ ] Crear pipeline de distribución de mensajes (Sys, App, UI)\r\n\r\n## Entregables\r\n1. **rxjs-bridge.ts**: Bridge completo con Subject/Observable por canal\r\n2. **Types y interfaces**: Definiciones TypeScript para eventos y mensajes\r\n3. **Gestión de rooms**: Sistema de subscripción/unsubscripción a rooms\r\n4. **Pipeline de eventos**: Distribución automática por tipo de canal\r\n\r\n## Fase 1: Análisis y Planificación (30 min)\r\n- [ ] Diseñar arquitectura del bridge con diagramas\r\n- [ ] Definir interfaces para eventos y mensajes\r\n- [ ] Planificar estrategia de reconexión\r\n- [ ] Especificar tipos de canales (Sys, App, UI)\r\n\r\n## Fase 2: Implementación Core (120 min)\r\n- [ ] Implementar `RxjsSocketBridge` class principal\r\n- [ ] Desarrollar `ChannelManager` para separación de canales\r\n- [ ] Crear `RoomManager` para gestión de rooms Socket.io\r\n- [ ] Implementar `ReconnectionHandler` con backoff exponencial\r\n- [ ] Desarrollar pipeline de eventos con operators RxJS\r\n- [ ] Crear factory methods para Observables tipados\r\n\r\n## Fase 3: Testing y Validación (45 min)\r\n- [ ] Tests unitarios para el bridge principal\r\n- [ ] Tests de reconexión y manejo de errores\r\n- [ ] Validación de tipado TypeScript\r\n- [ ] Tests de performance para memoria y latencia\r\n\r\n## Fase 4: Integración y Refinamiento (30 min)\r\n- [ ] Optimizar uso de memoria con unsubscribe\r\n- [ ] Implementar logging detallado\r\n- [ ] Revisar patrones RxJS utilizados\r\n- [ ] Documentar API del bridge\r\n\r\n## Fase 5: Documentación y Cierre (15 min)\r\n- [ ] Documentar API completa del bridge\r\n- [ ] Crear ejemplos de uso\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar interfaces para iteración 03\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 01  \r\n**Bloquea a:** Iteración 03, 04, 07\r\n\r\n## Notas Técnicas\r\n- Usar RxJS Subject para eventos bidireccionales\r\n- Implementar operators: mergeMap, filter, scan, throttle, debounce\r\n- Tipado estricto con generics TypeScript\r\n- Gestión de memoria con takeUntil pattern\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"02\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"design_bridge_architecture\", \"implement_channel_manager\", \"create_room_system\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":2632},"attached_assets/iteration_03_1756831481522.md":{"content":"# Iteración 03 - Componentes Angular Base\r\n**Fase:** 2 - Componentes Angular y UI  \r\n**Duración estimada:** 2.5 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Implementar BotListComponent con gestión de estados\r\n- [ ] Desarrollar MessagePanelComponent con visualización de mensajes\r\n- [ ] Crear servicios Angular para integración con bridge\r\n- [ ] Establecer comunicación reactiva entre componentes\r\n\r\n## Entregables\r\n1. **BotListComponent**: Lista de bots con estados y controles\r\n2. **MessagePanelComponent**: Panel de mensajes en tiempo real\r\n3. **BotService**: Servicio para gestión de bots\r\n4. **MessageService**: Servicio para manejo de mensajes\r\n5. **Shared interfaces**: Modelos TypeScript compartidos\r\n\r\n## Fase 1: Análisis y Planificación (25 min)\r\n- [ ] Diseñar estructura de componentes Angular\r\n- [ ] Definir interfaces para bots y mensajes\r\n- [ ] Planificar integración con bridge RxJS\r\n- [ ] Especificar estados de UI y flujos de datos\r\n\r\n## Fase 2: Implementación Core (100 min)\r\n- [ ] Crear `BotListComponent` con:\r\n  - Lista reactiva de bots\r\n  - Estados: online/offline/processing\r\n  - Controles de activación/desactivación\r\n- [ ] Desarrollar `MessagePanelComponent` con:\r\n  - Stream de mensajes en tiempo real\r\n  - Filtros por tipo y canal\r\n  - Scroll automático y paginación\r\n- [ ] Implementar `BotService`:\r\n  - Integración con bridge RxJS\r\n  - CRUD operations para bots\r\n  - Estados reactivos con BehaviorSubject\r\n- [ ] Crear `MessageService`:\r\n  - Pipeline de mensajes desde bridge\r\n  - Filtrado y transformación\r\n  - Cache y persistencia temporal\r\n\r\n## Fase 3: Testing y Validación (40 min)\r\n- [ ] Tests unitarios para componentes\r\n- [ ] Tests de servicios con mocks\r\n- [ ] Validación de comunicación reactiva\r\n- [ ] Tests de integración con bridge\r\n\r\n## Fase 4: Integración y Refinamiento (25 min)\r\n- [ ] Optimizar change detection strategy\r\n- [ ] Implementar trackBy functions\r\n- [ ] Revisar manejo de subscriptions\r\n- [ ] Añadir loading states y error handling\r\n\r\n## Fase 5: Documentación y Cierre (10 min)\r\n- [ ] Documentar componentes y servicios\r\n- [ ] Crear storybook stories (opcional)\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar estilos para iteración 04\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 02  \r\n**Bloquea a:** Iteración 04, 08\r\n\r\n## Notas Técnicas\r\n- Usar OnPush change detection strategy\r\n- Implementar async pipe para Observables\r\n- Gestión de subscriptions con takeUntil\r\n- Material Design o styling framework\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"03\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"create_bot_list_component\", \"implement_message_panel\", \"integrate_services\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":2774},"attached_assets/iteration_04_1756831481523.md":{"content":"# Iteración 04 - UI Avanzada y Filtros\r\n**Fase:** 2 - Componentes Angular y UI  \r\n**Duración estimada:** 2.5 horas  \r\n**Prioridad:** Media\r\n\r\n## Objetivos\r\n- [ ] Implementar sistema de filtros avanzados para mensajes\r\n- [ ] Desarrollar controles de bot individuales y grupales\r\n- [ ] Crear dashboard con métricas en tiempo real\r\n- [ ] Añadir theming y responsive design\r\n\r\n## Entregables\r\n1. **Filter system**: Filtros por canal, tipo, tiempo, bot\r\n2. **Bot controls**: Controles avanzados de bots\r\n3. **Dashboard**: Métricas y estadísticas en tiempo real\r\n4. **Responsive UI**: Adaptación a diferentes tamaños de pantalla\r\n5. **Theme system**: Modo claro/oscuro\r\n\r\n## Fase 1: Análisis y Planificación (25 min)\r\n- [ ] Diseñar sistema de filtros con combinaciones\r\n- [ ] Planificar controles de bot avanzados\r\n- [ ] Especificar métricas del dashboard\r\n- [ ] Definir breakpoints responsive\r\n\r\n## Fase 2: Implementación Core (100 min)\r\n- [ ] Desarrollar `FilterComponent`:\r\n  - Filtros por canal (Sys, App, UI)\r\n  - Filtros temporales (últimos X minutos)\r\n  - Filtros por bot específico\r\n  - Combinación de filtros con operators RxJS\r\n- [ ] Extender `BotListComponent`:\r\n  - Controles individuales por bot\r\n  - Selección múltiple de bots\r\n  - Acciones grupales (start/stop/reset)\r\n- [ ] Crear `DashboardComponent`:\r\n  - Contador de mensajes por canal\r\n  - Métricas de performance (latencia, throughput)\r\n  - Estados de conexión y salud del sistema\r\n- [ ] Implementar responsive design:\r\n  - Grid layout adaptativo\r\n  - Mobile-first approach\r\n  - Sidebar colapsable\r\n\r\n## Fase 3: Testing y Validación (40 min)\r\n- [ ] Tests de filtros complejos\r\n- [ ] Tests de controles de bot\r\n- [ ] Validación responsive en diferentes devices\r\n- [ ] Tests de performance UI\r\n\r\n## Fase 4: Integración y Refinamiento (25 min)\r\n- [ ] Optimizar renders con virtual scrolling\r\n- [ ] Implementar lazy loading de componentes\r\n- [ ] Añadir animaciones suaves\r\n- [ ] Revisar accessibility (a11y)\r\n\r\n## Fase 5: Documentación y Cierre (10 min)\r\n- [ ] Documentar sistema de filtros\r\n- [ ] Crear guía de estilos\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar transición a Three.js\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 03  \r\n**Bloquea a:** Iteración 08\r\n\r\n## Notas Técnicas\r\n- Virtual scrolling para listas grandes\r\n- CDK Layout module para responsive\r\n- Angular Animations API\r\n- WCAG 2.1 compliance\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"04\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"implement_advanced_filters\", \"create_dashboard\", \"responsive_design\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":2677},"attached_assets/iteration_05_1756831481523.md":{"content":"# Iteración 05 - Escena Three.js Básica\r\n**Fase:** 3 - Escena Three.js y Renderizado  \r\n**Duración estimada:** 3 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Configurar escena Three.js con WebGL renderer\r\n- [ ] Implementar esfera central (Socket.io hub)\r\n- [ ] Crear cuatro espirales cardinales con posiciones de bots\r\n- [ ] Establecer cámara y controles de navegación\r\n\r\n## Entregables\r\n1. **ThreeJS Scene**: Escena 3D configurada y optimizada\r\n2. **Central Hub**: Esfera central representando Socket.io\r\n3. **Bot Positions**: Ocho posiciones en espirales cardinales\r\n4. **Camera Controls**: Navegación orbital y zoom\r\n5. **Scene Service**: Servicio Angular para gestión de escena\r\n\r\n## Fase 1: Análisis y Planificación (30 min)\r\n- [ ] Diseñar layout 3D de la escena\r\n- [ ] Calcular posiciones matemáticas de espirales\r\n- [ ] Planificar integración Angular-Three.js\r\n- [ ] Especificar materiales y lighting\r\n\r\n## Fase 2: Implementación Core (120 min)\r\n- [ ] Configurar `ThreeSceneService`:\r\n  - WebGL renderer con anti-aliasing\r\n  - Scene, camera, lights setup\r\n  - Responsive canvas sizing\r\n- [ ] Crear geometrías base:\r\n  - Esfera central (radio configurable)\r\n  - Marcadores para posiciones de bots\r\n  - Grid/axes helper para desarrollo\r\n- [ ] Implementar `SpiralGenerator`:\r\n  - Cálculo de posiciones cardinales (N, S, E, W)\r\n  - Generación de espirales matemáticas\r\n  - Dos posiciones por punto cardinal\r\n- [ ] Desarrollar `CameraController`:\r\n  - OrbitControls para navegación\r\n  - Zoom limits y auto-rotation\r\n  - Smooth transitions\r\n- [ ] Integrar con Angular:\r\n  - Component wrapper para canvas\r\n  - Lifecycle hooks management\r\n  - Resize observer para responsive\r\n\r\n## Fase 3: Testing y Validación (45 min)\r\n- [ ] Tests de configuración de escena\r\n- [ ] Validación de cálculos matemáticos\r\n- [ ] Tests de performance (FPS, memory)\r\n- [ ] Verificación responsive\r\n\r\n## Fase 4: Integración y Refinamiento (30 min)\r\n- [ ] Optimizar rendering pipeline\r\n- [ ] Implementar frustum culling\r\n- [ ] Añadir stats monitor (desarrollo)\r\n- [ ] Revisar garbage collection\r\n\r\n## Fase 5: Documentación y Cierre (15 min)\r\n- [ ] Documentar configuración de escena\r\n- [ ] Crear diagramas de posicionamiento\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar base para animaciones\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 01  \r\n**Bloquea a:** Iteración 06, 08\r\n\r\n## Notas Técnicas\r\n- WebGL2 renderer con fallback a WebGL1\r\n- PerspectiveCamera con FOV 75°\r\n- AmbientLight + DirectionalLight setup\r\n- Dispose pattern para memory management\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"05\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"setup_threejs_scene\", \"create_spiral_positions\", \"implement_camera_controls\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":2847},"attached_assets/iteration_06_1756831481523.md":{"content":"# Iteración 06 - Animaciones y Trayectorias\r\n**Fase:** 3 - Escena Three.js y Renderizado  \r\n**Duración estimada:** 3.5 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Implementar trayectorias animadas de mensajes usando THREE.Curve\r\n- [ ] Desarrollar sistema de diferenciación por color de canal\r\n- [ ] Crear animaciones fluidas de partículas/mensajes\r\n- [ ] Optimizar rendering para múltiples animaciones simultáneas\r\n\r\n## Entregables\r\n1. **Trajectory System**: Trayectorias curvas entre centro y bots\r\n2. **Animation Pipeline**: Sistema de animación de partículas\r\n3. **Color Coding**: Diferenciación visual por canal (Sys/App/UI)\r\n4. **Performance Optimization**: Instanced rendering y object pooling\r\n5. **Visual Effects**: Trails, glow effects, particle systems\r\n\r\n## Fase 1: Análisis y Planificación (35 min)\r\n- [ ] Diseñar matemáticas de trayectorias curvas\r\n- [ ] Planificar sistema de colores por canal\r\n- [ ] Especificar performance requirements\r\n- [ ] Definir efectos visuales y estilo\r\n\r\n## Fase 2: Implementación Core (140 min)\r\n- [ ] Desarrollar `TrajectoryManager`:\r\n  - THREE.CubicBezierCurve3 para trayectorias suaves\r\n  - Cálculo de puntos de control automático\r\n  - Cache de geometrías de curvas\r\n- [ ] Implementar `MessageParticle` system:\r\n  - Geometría eficiente para partículas\r\n  - Material con color diferenciado\r\n  - Position interpolation along curves\r\n- [ ] Crear `AnimationController`:\r\n  - requestAnimationFrame loop optimizado\r\n  - Timeline management para múltiples animaciones\r\n  - Easing functions (ease-in-out, bezier)\r\n- [ ] Desarrollar color system:\r\n  - Sys channel: Red (#ff4444)\r\n  - App channel: Blue (#4444ff)\r\n  - UI channel: Green (#44ff44)\r\n  - Intensity variation por importancia\r\n- [ ] Optimizar performance:\r\n  - InstancedBufferGeometry para partículas\r\n  - Object pooling para reutilización\r\n  - LOD (Level of Detail) management\r\n\r\n## Fase 3: Testing y Validación (50 min)\r\n- [ ] Tests de matemáticas de curvas\r\n- [ ] Benchmarks de performance (100+ partículas simultáneas)\r\n- [ ] Validación visual de colores y efectos\r\n- [ ] Tests de memory leaks\r\n\r\n## Fase 4: Integración y Refinamiento (35 min)\r\n- [ ] Integrar con pipeline de mensajes\r\n- [ ] Añadir configuración de velocidad de animación\r\n- [ ] Implementar pausa/resume de animaciones\r\n- [ ] Refinar efectos visuales\r\n\r\n## Fase 5: Documentación y Cierre (20 min)\r\n- [ ] Documentar sistema de animaciones\r\n- [ ] Crear configuración de efectos\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar integración con datos reales\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 05  \r\n**Bloquea a:** Iteración 08\r\n\r\n## Notas Técnicas\r\n- Use THREE.Vector3.lerp() para interpolación\r\n- BufferGeometry con custom attributes\r\n- Shader materials para efectos avanzados\r\n- 60 FPS target con 100+ partículas\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"06\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"implement_trajectory_curves\", \"create_particle_system\", \"optimize_rendering\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":3112},"attached_assets/iteration_07_1756831481523.md":{"content":"# Iteración 07 - Pipeline de Datos\r\n**Fase:** 4 - Pipeline de Datos y Integración  \r\n**Duración estimada:** 3 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Desarrollar pipeline RxJS completo para transformación de datos\r\n- [ ] Implementar filtrado y distribución simultánea a Angular y Three.js\r\n- [ ] Crear sistema de reconexiones y optimizaciones\r\n- [ ] Establecer manejo robusto de errores y logging\r\n\r\n## Entregables\r\n1. **message-pipeline.ts**: Pipeline principal de datos RxJS\r\n2. **Data transformers**: Transformaciones específicas por destino\r\n3. **Error handling**: Sistema robusto de manejo de errores\r\n4. **Reconnection system**: Gestión automática de reconexiones\r\n5. **Performance monitoring**: Métricas y logging del pipeline\r\n\r\n## Fase 1: Análisis y Planificación (30 min)\r\n- [ ] Diseñar arquitectura del pipeline de datos\r\n- [ ] Especificar transformaciones necesarias\r\n- [ ] Planificar estrategia de error handling\r\n- [ ] Definir métricas de performance\r\n\r\n## Fase 2: Implementación Core (120 min)\r\n- [ ] Desarrollar `MessagePipeline` principal:\r\n  - Source: Bridge RxJS-Socket.io\r\n  - Operators: scan, filter, mergeMap, throttle, debounce\r\n  - Multiple destinations: Angular services, Three.js scene\r\n- [ ] Implementar transformers específicos:\r\n  - `AngularTransformer`: Datos para componentes UI\r\n  - `ThreeJsTransformer`: Datos para animaciones 3D\r\n  - `MetricsTransformer`: Datos para dashboard\r\n- [ ] Crear `ErrorHandler` robusto:\r\n  - Retry logic con exponential backoff\r\n  - Error classification (network, parsing, business)\r\n  - Fallback mechanisms\r\n- [ ] Desarrollar `ReconnectionManager`:\r\n  - Automatic reconnection con circuit breaker\r\n  - Connection health monitoring\r\n  - State persistence durante desconexiones\r\n- [ ] Implementar performance optimization:\r\n  - Buffer management para burst messages\r\n  - Rate limiting y throttling inteligente\r\n  - Memory leak prevention\r\n\r\n## Fase 3: Testing y Validación (45 min)\r\n- [ ] Tests unitarios del pipeline principal\r\n- [ ] Tests de transformers con datos mock\r\n- [ ] Simulación de errores y reconexiones\r\n- [ ] Benchmarks de throughput y latencia\r\n\r\n## Fase 4: Integración y Refinamiento (30 min)\r\n- [ ] Integrar pipeline con bridge existente\r\n- [ ] Conectar outputs a servicios Angular y Three.js\r\n- [ ] Optimizar operators chain\r\n- [ ] Añadir logging detallado\r\n\r\n## Fase 5: Documentación y Cierre (15 min)\r\n- [ ] Documentar arquitectura del pipeline\r\n- [ ] Crear diagramas de flujo de datos\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar datos para integración completa\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 02, 03, 05  \r\n**Bloquea a:** Iteración 08\r\n\r\n## Notas Técnicas\r\n- RxJS operators: scan, filter, mergeMap, throttleTime, debounceTime\r\n- shareReplay() para múltiples subscriptores\r\n- takeUntil() para cleanup automático\r\n- Custom operators para transformaciones específicas\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"07\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"design_pipeline_architecture\", \"implement_data_transformers\", \"create_error_handling\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":3190},"attached_assets/iteration_08_1756831481523.md":{"content":"# Iteración 08 - Integración Completa\r\n**Fase:** 4 - Pipeline de Datos y Integración  \r\n**Duración estimada:** 3 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Integrar completamente Angular UI con escena Three.js\r\n- [ ] Sincronizar estados entre componentes Angular y visualización 3D\r\n- [ ] Implementar comunicación bidireccional completa\r\n- [ ] Validar flujo de datos end-to-end\r\n\r\n## Entregables\r\n1. **Full integration**: Angular + Three.js completamente integrados\r\n2. **State synchronization**: Estados sincronizados entre UI y 3D\r\n3. **Bidirectional communication**: Comunicación completa en ambas direcciones\r\n4. **End-to-end validation**: Validación completa del flujo de datos\r\n5. **Performance optimization**: Optimizaciones finales de integración\r\n\r\n## Fase 1: Análisis y Planificación (30 min)\r\n- [ ] Revisar interfaces entre módulos\r\n- [ ] Planificar sincronización de estados\r\n- [ ] Identificar puntos de integración críticos\r\n- [ ] Definir validaciones end-to-end\r\n\r\n## Fase 2: Implementación Core (120 min)\r\n- [ ] Conectar `BotListComponent` con posiciones 3D:\r\n  - Click en bot UI → highlight en escena 3D\r\n  - Estados de bot reflejados en ambas vistas\r\n  - Sincronización de activación/desactivación\r\n- [ ] Integrar `MessagePanelComponent` con animaciones:\r\n  - Mensajes en panel → animaciones en tiempo real\r\n  - Filtros UI aplicados a visualización 3D\r\n  - Timeline sincronizada entre vistas\r\n- [ ] Desarrollar `StateManager` centralizado:\r\n  - Single source of truth para estados\r\n  - Propagación automática a todos los módulos\r\n  - Persistence de configuración user\r\n- [ ] Implementar comunicación 3D → Angular:\r\n  - Click en bots 3D → selección en UI\r\n  - Hover effects bidireccionales\r\n  - Camera position sync con UI state\r\n- [ ] Crear `IntegrationService`:\r\n  - Coordination layer entre módulos\r\n  - Event transformation y routing\r\n  - Performance monitoring integration\r\n\r\n## Fase 3: Testing y Validación (45 min)\r\n- [ ] Tests de integración end-to-end\r\n- [ ] Validación de sincronización de estados\r\n- [ ] Tests de performance integrada\r\n- [ ] Verificación de memory management\r\n\r\n## Fase 4: Integración y Refinamiento (30 min)\r\n- [ ] Optimizar comunicación inter-módulos\r\n- [ ] Refinar UX de interacciones\r\n- [ ] Resolver race conditions\r\n- [ ] Pulir animaciones y transiciones\r\n\r\n## Fase 5: Documentación y Cierre (15 min)\r\n- [ ] Documentar arquitectura integrada\r\n- [ ] Crear guía de interacciones\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar base para demo\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 03, 04, 06, 07  \r\n**Bloquea a:** Iteración 09\r\n\r\n## Notas Técnicas\r\n- Shared state management con RxJS BehaviorSubject\r\n- Event delegation para performance\r\n- Debounced updates para evitar thrashing\r\n- Centralized error boundary\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"08\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"connect_ui_with_3d\", \"implement_state_sync\", \"create_integration_service\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":3095},"attached_assets/iteration_09_1756831481523.md":{"content":"# Iteración 09 - Demo y Simulación\r\n**Fase:** 5 - Demo, Testing y Documentación  \r\n**Duración estimada:** 2.5 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Implementar cliente externo de demo (demo-client.ts)\r\n- [ ] Crear secuencia de demostración completa\r\n- [ ] Validar sincronización entre todos los módulos\r\n- [ ] Desarrollar métricas y logging para evaluación\r\n\r\n## Entregables\r\n1. **demo-client.ts**: Cliente externo para simulación\r\n2. **Demo sequence**: Secuencia predefinida de eventos\r\n3. **Validation suite**: Validación completa de sincronización\r\n4. **Metrics dashboard**: Dashboard de métricas en tiempo real\r\n5. **Demo documentation**: Documentación de la demostración\r\n\r\n## Fase 1: Análisis y Planificación (25 min)\r\n- [ ] Diseñar secuencia de demo representativa\r\n- [ ] Planificar eventos de simulación\r\n- [ ] Especificar métricas de validación\r\n- [ ] Definir criterios de éxito\r\n\r\n## Fase 2: Implementación Core (100 min)\r\n- [ ] Desarrollar `DemoClient`:\r\n  - Simulación de mensajes de salud del sistema (broadcast)\r\n  - Simulación de clicks de usuario en bots\r\n  - Generación de eventos en secuencia temporal\r\n  - Configuración de scenarios diversos\r\n- [ ] Crear `DemoSequence`:\r\n  - Scenario 1: Health check broadcast a todos los bots\r\n  - Scenario 2: Activación secuencial de bots por cardinal\r\n  - Scenario 3: Flood de mensajes para test de performance\r\n  - Scenario 4: Simulación de errores y reconexión\r\n- [ ] Implementar `ValidationSuite`:\r\n  - Verificación de latencia end-to-end\r\n  - Validación de sincronización UI-3D\r\n  - Check de memory leaks durante demo\r\n  - Verification de frame rate stability\r\n- [ ] Desarrollar `MetricsDashboard`:\r\n  - Real-time performance metrics\r\n  - Message throughput monitoring\r\n  - Connection health indicators\r\n  - Memory usage tracking\r\n- [ ] Crear `DemoOrchestrator`:\r\n  - Control centralizado de la demo\r\n  - Pause/resume/restart capabilities\r\n  - Step-by-step execution mode\r\n  - Automated vs manual control\r\n\r\n## Fase 3: Testing y Validación (40 min)\r\n- [ ] Ejecutar demo completa múltiples veces\r\n- [ ] Validar métricas de performance\r\n- [ ] Verificar sincronización visual\r\n- [ ] Tests de stress con múltiples clientes\r\n\r\n## Fase 4: Integración y Refinamiento (25 min)\r\n- [ ] Optimizar demo para presentación\r\n- [ ] Refinar visualización de métricas\r\n- [ ] Pulir interacciones de usuario\r\n- [ ] Preparar configuraciones de demo\r\n\r\n## Fase 5: Documentación y Cierre (10 min)\r\n- [ ] Documentar secuencias de demo\r\n- [ ] Crear guía de ejecución\r\n- [ ] Actualizar MASTER_CHECKLIST.md\r\n- [ ] Preparar datos para testing final\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 08  \r\n**Bloquea a:** Iteración 10\r\n\r\n## Notas Técnicas\r\n- WebSocket client independiente para demo\r\n- Configurable timing y scenarios\r\n- Real-time metrics con WebGL stats\r\n- Screenshot/recording capabilities\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"09\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"implement_demo_client\", \"create_demo_sequences\", \"build_validation_suite\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":3165},"attached_assets/iteration_10_1756831481523.md":{"content":"# Iteración 10 - Testing y Documentación Final\r\n**Fase:** 5 - Demo, Testing y Documentación  \r\n**Duración estimada:** 4 horas  \r\n**Prioridad:** Alta\r\n\r\n## Objetivos\r\n- [ ] Completar suite de testing completa (unitarios, integración, e2e)\r\n- [ ] Desarrollar tests de performance y auditoría de seguridad\r\n- [ ] Crear documentación técnica completa\r\n- [ ] Preparar entrega final del proyecto\r\n\r\n## Entregables\r\n1. **Complete test suite**: Tests unitarios, integración y e2e\r\n2. **Performance tests**: Benchmarks y tests de rendimiento\r\n3. **Security audit**: Auditoría de seguridad Socket.io\r\n4. **Technical documentation**: Documentación técnica completa\r\n5. **Deployment guide**: Guía de despliegue y producción\r\n\r\n## Fase 1: Análisis y Planificación (40 min)\r\n- [ ] Revisar cobertura de tests existente\r\n- [ ] Planificar tests faltantes\r\n- [ ] Especificar benchmarks de performance\r\n- [ ] Definir estructura de documentación\r\n\r\n## Fase 2: Implementación Core (160 min)\r\n- [ ] Completar **Unit Tests** (Jasmine/Karma):\r\n  - Tests para todos los servicios Angular\r\n  - Tests para pipeline RxJS y transformers\r\n  - Tests para Bridge y managers\r\n  - Mocks para dependencias externas\r\n- [ ] Desarrollar **Integration Tests**:\r\n  - Tests de comunicación Angular-Three.js\r\n  - Tests de pipeline completo end-to-end\r\n  - Tests de reconexión y error handling\r\n- [ ] Implementar **E2E Tests** (Cypress):\r\n  - User journeys completos\r\n  - Tests de UI interactiva\r\n  - Tests de visualización 3D\r\n  - Scenarios de demo automatizados\r\n- [ ] Crear **Performance Tests**:\r\n  - Frame rate monitoring (60fps target)\r\n  - Memory usage and garbage collection\r\n  - Message throughput benchmarks\r\n  - Stress tests con 1000+ mensajes\r\n- [ ] Realizar **Security Audit**:\r\n  - Socket.io configuration security\r\n  - Input validation y sanitization\r\n  - CORS y authentication considerations\r\n  - Vulnerability scanning\r\n\r\n## Fase 3: Testing y Validación (60 min)\r\n- [ ] Ejecutar suite completa de tests\r\n- [ ] Generar reportes de cobertura\r\n- [ ] Ejecutar performance benchmarks\r\n- [ ] Validar security audit results\r\n\r\n## Fase 4: Integración y Refinamiento (50 min)\r\n- [ ] Crear **Technical Documentation**:\r\n  - Architecture overview con diagramas\r\n  - API reference completa\r\n  - Development setup guide\r\n  - Troubleshooting guide\r\n- [ ] Desarrollar **README.md** principal:\r\n  - Project overview y features\r\n  - Quick start guide\r\n  - Installation instructions\r\n  - Usage examples\r\n- [ ] Preparar **Deployment Guide**:\r\n  - Production build configuration\r\n  - Docker deployment\r\n  - Environment variables\r\n  - Monitoring y logging setup\r\n\r\n## Fase 5: Documentación y Cierre (30 min)\r\n- [ ] Generar documentación final\r\n- [ ] Crear release notes\r\n- [ ] Actualizar MASTER_CHECKLIST.md (completado)\r\n- [ ] Preparar entrega del proyecto\r\n\r\n## Dependencias\r\n**Requiere completadas:** Iteración 09  \r\n**Bloquea a:** Ninguna (iteración final)\r\n\r\n## Notas Técnicas\r\n- Target: >90% test coverage\r\n- Performance: 60fps sustained, <100MB memory\r\n- Security: OWASP compliance básico\r\n- Documentation: Technical writer level\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"10\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [\"complete_test_suite\", \"performance_benchmarks\", \"create_documentation\"],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":3374},"attached_assets/iteration_template_1756831475089.md":{"content":"# Iteración XX - [Título]\r\n**Fase:** [Número y nombre de fase]  \r\n**Duración estimada:** [X horas]  \r\n**Prioridad:** [Alta/Media/Baja]\r\n\r\n## Objetivos\r\n- [ ] Objetivo principal 1\r\n- [ ] Objetivo principal 2\r\n- [ ] Objetivo principal 3\r\n\r\n## Entregables\r\n1. **[Nombre del entregable]**: Descripción y criterios de aceptación\r\n2. **[Nombre del entregable]**: Descripción y criterios de aceptación\r\n\r\n## Fase 1: Análisis y Planificación (20 min)\r\n- [ ] Revisar dependencias de iteraciones anteriores\r\n- [ ] Analizar requisitos específicos\r\n- [ ] Definir arquitectura de componentes\r\n- [ ] Crear checklist detallado de tareas\r\n\r\n## Fase 2: Implementación Core (60 min)\r\n- [ ] Implementar componente/módulo principal\r\n- [ ] Desarrollar funcionalidades base\r\n- [ ] Integrar con módulos existentes\r\n- [ ] Documentar código inline\r\n\r\n## Fase 3: Testing y Validación (30 min)\r\n- [ ] Escribir tests unitarios\r\n- [ ] Ejecutar tests de integración\r\n- [ ] Validar criterios de aceptación\r\n- [ ] Verificar cobertura de código\r\n\r\n## Fase 4: Integración y Refinamiento (20 min)\r\n- [ ] Integrar con pipeline principal\r\n- [ ] Optimizar rendimiento\r\n- [ ] Revisar y refactorizar código\r\n- [ ] Actualizar documentación\r\n\r\n## Fase 5: Documentación y Cierre (10 min)\r\n- [ ] Actualizar README y docs técnicas\r\n- [ ] Marcar checklist en MASTER_CHECKLIST.md\r\n- [ ] Documentar lecciones aprendidas\r\n- [ ] Preparar siguiente iteración\r\n\r\n## Dependencias\r\n**Requiere completadas:** [Lista de iteraciones]  \r\n**Bloquea a:** [Lista de iteraciones futuras]\r\n\r\n## Notas Técnicas\r\n*Agregar consideraciones específicas, patrones a usar, etc.*\r\n\r\n## Estado Actual (JSON)\r\n```json\r\n{\r\n  \"iteration\": \"XX\",\r\n  \"status\": \"pending\",\r\n  \"progress\": 0,\r\n  \"blockers\": [],\r\n  \"next_steps\": [],\r\n  \"estimated_completion\": null\r\n}\r\n```\r\n","size_bytes":1820},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/socket-server.ts":{"content":"import express from 'express';\nimport { createServer, Server as HttpServer } from 'http';\nimport { Server as SocketIOServer, Socket } from 'socket.io';\nimport cors from 'cors';\n\ninterface ServerConfig {\n  port: number;\n  corsOrigin: string | string[];\n  enableLogging: boolean;\n}\n\nclass SocketServer {\n  private app: express.Application;\n  private httpServer: HttpServer;\n  private io: SocketIOServer;\n  private config: ServerConfig;\n  \n  // Connected clients tracking\n  private connectedClients = new Map<string, Socket>();\n  private rooms = new Map<string, Set<string>>();\n  \n  constructor(config?: Partial<ServerConfig>) {\n    this.config = {\n      port: 8000,\n      corsOrigin: ['http://localhost:5000', 'http://localhost:4200'],\n      enableLogging: true,\n      ...config\n    };\n    \n    // Initialize Express app\n    this.app = express();\n    this.app.use(cors({\n      origin: this.config.corsOrigin,\n      methods: ['GET', 'POST'],\n      credentials: true\n    }));\n    \n    // Create HTTP server\n    this.httpServer = createServer(this.app);\n    \n    // Initialize Socket.io\n    this.io = new SocketIOServer(this.httpServer, {\n      cors: {\n        origin: this.config.corsOrigin,\n        methods: ['GET', 'POST'],\n        credentials: true\n      },\n      pingTimeout: 60000,\n      pingInterval: 25000\n    });\n    \n    this.setupRoutes();\n    this.setupSocketHandlers();\n  }\n\n  /**\n   * Set up Express routes\n   */\n  private setupRoutes(): void {\n    // Health check endpoint\n    this.app.get('/health', (req, res) => {\n      res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        clients: this.connectedClients.size,\n        rooms: this.rooms.size,\n        uptime: process.uptime()\n      });\n    });\n    \n    // Socket.io stats endpoint\n    this.app.get('/stats', (req, res) => {\n      const roomStats = Array.from(this.rooms.entries()).map(([id, clients]) => ({\n        id,\n        clients: clients.size\n      }));\n      \n      res.json({\n        connectedClients: this.connectedClients.size,\n        rooms: roomStats,\n        serverTime: new Date().toISOString()\n      });\n    });\n    \n    this.log('Express routes configured');\n  }\n\n  /**\n   * Set up Socket.io event handlers\n   */\n  private setupSocketHandlers(): void {\n    this.io.on('connection', (socket: Socket) => {\n      this.handleConnection(socket);\n    });\n    \n    this.log('Socket.io handlers configured');\n  }\n\n  /**\n   * Handle new socket connection\n   */\n  private handleConnection(socket: Socket): void {\n    const clientId = socket.id;\n    this.connectedClients.set(clientId, socket);\n    \n    this.log(`Client connected: ${clientId} (Total: ${this.connectedClients.size})`);\n    \n    // Send welcome message\n    socket.emit('connection_established', {\n      clientId,\n      serverTime: new Date().toISOString(),\n      message: 'Welcome to ThreeGamificationUI Socket Server'\n    });\n    \n    // Handle disconnection\n    socket.on('disconnect', (reason) => {\n      this.handleDisconnection(socket, reason);\n    });\n    \n    // Handle channel-specific messages\n    this.setupChannelHandlers(socket);\n    \n    // Handle room management\n    this.setupRoomHandlers(socket);\n    \n    // Handle error events\n    socket.on('error', (error) => {\n      this.log(`Socket error from ${clientId}:`, error);\n    });\n  }\n\n  /**\n   * Set up channel-specific message handlers\n   */\n  private setupChannelHandlers(socket: Socket): void {\n    const channels = ['sys', 'app', 'ui'];\n    \n    channels.forEach(channel => {\n      socket.on(`${channel}_message`, (data) => {\n        this.handleChannelMessage(socket, channel, data);\n      });\n    });\n    \n    // Generic message handler\n    socket.on('message', (data) => {\n      this.handleChannelMessage(socket, 'general', data);\n    });\n  }\n\n  /**\n   * Handle channel message\n   */\n  private handleChannelMessage(socket: Socket, channel: string, data: any): void {\n    try {\n      // Add server metadata\n      const enrichedMessage = {\n        ...data,\n        serverId: process.pid,\n        serverTime: new Date().toISOString(),\n        clientId: socket.id\n      };\n      \n      this.log(`[${channel.toUpperCase()}] Message from ${socket.id}:`, data.type || 'unknown');\n      \n      // Broadcast to all clients (including sender for demo purposes)\n      socket.emit(`${channel}_message`, enrichedMessage);\n      socket.broadcast.emit(`${channel}_message`, enrichedMessage);\n      \n      // Also emit generic message event\n      socket.emit('message', enrichedMessage);\n      socket.broadcast.emit('message', enrichedMessage);\n      \n      // Handle specific message types\n      this.handleSpecificMessageTypes(socket, channel, enrichedMessage);\n      \n    } catch (error) {\n      this.log(`Error handling ${channel} message:`, error);\n      socket.emit('error', { \n        message: 'Failed to process message',\n        originalMessage: data \n      });\n    }\n  }\n\n  /**\n   * Handle specific message types with server responses\n   */\n  private handleSpecificMessageTypes(socket: Socket, channel: string, message: any): void {\n    switch (message.type) {\n      case 'bot_command':\n        // Simulate bot response\n        setTimeout(() => {\n          const response = {\n            id: `response_${Date.now()}`,\n            timestamp: Date.now(),\n            channel: 'sys',\n            type: 'bot_status',\n            botId: message.botId,\n            status: message.command === 'start' ? 'online' : \n                   message.command === 'stop' ? 'offline' : 'processing',\n            position: message.position || this.generateBotPosition(message.botId)\n          };\n          \n          socket.emit('sys_message', response);\n          socket.broadcast.emit('sys_message', response);\n        }, 500 + Math.random() * 1500); // Simulate processing delay\n        break;\n        \n      case 'health_check':\n        // Respond with current server health\n        const healthResponse = {\n          id: `health_${Date.now()}`,\n          timestamp: Date.now(),\n          channel: 'sys',\n          type: 'health_check',\n          systemHealth: {\n            cpu: Math.random() * 30 + 10, // Simulate low CPU usage\n            memory: Math.random() * 40 + 30, // Simulate moderate memory usage\n            connections: this.connectedClients.size\n          }\n        };\n        \n        socket.emit('sys_message', healthResponse);\n        break;\n    }\n  }\n\n  /**\n   * Set up room management handlers\n   */\n  private setupRoomHandlers(socket: Socket): void {\n    socket.on('join_room', (roomId: string, callback) => {\n      this.handleJoinRoom(socket, roomId, callback);\n    });\n    \n    socket.on('leave_room', (roomId: string, callback) => {\n      this.handleLeaveRoom(socket, roomId, callback);\n    });\n    \n    socket.on('get_rooms', (callback) => {\n      this.handleGetRooms(socket, callback);\n    });\n  }\n\n  /**\n   * Handle room join\n   */\n  private handleJoinRoom(socket: Socket, roomId: string, callback?: Function): void {\n    try {\n      socket.join(roomId);\n      \n      // Track room membership\n      if (!this.rooms.has(roomId)) {\n        this.rooms.set(roomId, new Set());\n      }\n      this.rooms.get(roomId)!.add(socket.id);\n      \n      this.log(`Client ${socket.id} joined room: ${roomId}`);\n      \n      // Notify room members\n      socket.to(roomId).emit('user_joined', {\n        userId: socket.id,\n        roomId,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Notify client about successful join\n      socket.emit('room_joined', roomId);\n      \n      if (callback) callback(true);\n      \n    } catch (error) {\n      this.log(`Error joining room ${roomId}:`, error);\n      if (callback) callback(false);\n    }\n  }\n\n  /**\n   * Handle room leave\n   */\n  private handleLeaveRoom(socket: Socket, roomId: string, callback?: Function): void {\n    try {\n      socket.leave(roomId);\n      \n      // Update room tracking\n      const room = this.rooms.get(roomId);\n      if (room) {\n        room.delete(socket.id);\n        if (room.size === 0) {\n          this.rooms.delete(roomId);\n        }\n      }\n      \n      this.log(`Client ${socket.id} left room: ${roomId}`);\n      \n      // Notify room members\n      socket.to(roomId).emit('user_left', {\n        userId: socket.id,\n        roomId,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Notify client about successful leave\n      socket.emit('room_left', roomId);\n      \n      if (callback) callback(true);\n      \n    } catch (error) {\n      this.log(`Error leaving room ${roomId}:`, error);\n      if (callback) callback(false);\n    }\n  }\n\n  /**\n   * Handle get rooms request\n   */\n  private handleGetRooms(socket: Socket, callback?: Function): void {\n    const roomList = Array.from(this.rooms.entries()).map(([id, clients]) => ({\n      id,\n      name: id,\n      subscribers: clients.size\n    }));\n    \n    if (callback) {\n      callback(roomList);\n    } else {\n      socket.emit('rooms_list', roomList);\n    }\n  }\n\n  /**\n   * Handle client disconnection\n   */\n  private handleDisconnection(socket: Socket, reason: string): void {\n    const clientId = socket.id;\n    \n    // Remove from connected clients\n    this.connectedClients.delete(clientId);\n    \n    // Remove from all rooms\n    this.rooms.forEach((clients, roomId) => {\n      if (clients.has(clientId)) {\n        clients.delete(clientId);\n        if (clients.size === 0) {\n          this.rooms.delete(roomId);\n        } else {\n          // Notify remaining room members\n          socket.to(roomId).emit('user_left', {\n            userId: clientId,\n            roomId,\n            reason,\n            timestamp: new Date().toISOString()\n          });\n        }\n      }\n    });\n    \n    this.log(`Client disconnected: ${clientId} (Reason: ${reason}, Remaining: ${this.connectedClients.size})`);\n  }\n\n  /**\n   * Generate mock bot position\n   */\n  private generateBotPosition(botId: string): { x: number; y: number; z: number } {\n    // Simple hash-based position for consistency\n    const hash = this.simpleHash(botId);\n    const angle = (hash % 8) * (Math.PI / 4);\n    const radius = 5 + ((hash % 3) * 2);\n    \n    return {\n      x: Math.cos(angle) * radius,\n      y: (hash % 2) * 0.5,\n      z: Math.sin(angle) * radius\n    };\n  }\n\n  /**\n   * Simple hash function\n   */\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash);\n  }\n\n  /**\n   * Start the server\n   */\n  start(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.httpServer.listen(this.config.port, '0.0.0.0', () => {\n          this.log(`Socket.io server running on port ${this.config.port}`);\n          this.log(`CORS origins: ${JSON.stringify(this.config.corsOrigin)}`);\n          resolve();\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Stop the server\n   */\n  async stop(): Promise<void> {\n    return new Promise((resolve) => {\n      // Disconnect all clients\n      this.connectedClients.forEach((socket) => {\n        socket.disconnect(true);\n      });\n      \n      // Close server\n      this.httpServer.close(() => {\n        this.log('Socket.io server stopped');\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Logging utility\n   */\n  private log(...args: any[]): void {\n    if (this.config.enableLogging) {\n      const timestamp = new Date().toISOString();\n      console.log(`[${timestamp}] [SocketServer]`, ...args);\n    }\n  }\n\n  /**\n   * Get server statistics\n   */\n  getStats() {\n    return {\n      connectedClients: this.connectedClients.size,\n      rooms: this.rooms.size,\n      uptime: process.uptime(),\n      port: this.config.port\n    };\n  }\n}\n\n// Start server if this file is run directly\nif (require.main === module) {\n  const server = new SocketServer({\n    port: parseInt(process.env.SOCKET_PORT || '8000'),\n    corsOrigin: process.env.CORS_ORIGIN?.split(',') || ['http://localhost:5000'],\n    enableLogging: process.env.NODE_ENV !== 'production'\n  });\n  \n  server.start().catch(error => {\n    console.error('Failed to start Socket.io server:', error);\n    process.exit(1);\n  });\n  \n  // Graceful shutdown\n  process.on('SIGINT', async () => {\n    console.log('Received SIGINT, shutting down gracefully...');\n    await server.stop();\n    process.exit(0);\n  });\n}\n\nexport default SocketServer;\n","size_bytes":12451},"server/start-socket-server.ts":{"content":"import SocketServer from './socket-server';\n\n// Configuration from environment variables\nconst config = {\n  port: parseInt(process.env.SOCKET_PORT || '8000'),\n  corsOrigin: process.env.CORS_ORIGIN?.split(',') || [\n    'http://localhost:5000',\n    'http://localhost:4200',\n    'http://127.0.0.1:5000',\n    'http://127.0.0.1:4200'\n  ],\n  enableLogging: process.env.NODE_ENV !== 'production'\n};\n\nconsole.log('Starting Socket.io server with configuration:', config);\n\n// Create and start the server\nconst server = new SocketServer(config);\n\nasync function startServer() {\n  try {\n    await server.start();\n    console.log(`✅ Socket.io server running successfully`);\n    console.log(`📡 Server URL: http://localhost:${config.port}`);\n    console.log(`🔗 CORS Origins: ${config.corsOrigin.join(', ')}`);\n    console.log(`📊 Health check: http://localhost:${config.port}/health`);\n    console.log(`📈 Stats endpoint: http://localhost:${config.port}/stats`);\n    \n    // Display server statistics every 30 seconds\n    setInterval(() => {\n      const stats = server.getStats();\n      console.log(`[Stats] Clients: ${stats.connectedClients}, Rooms: ${stats.rooms}, Uptime: ${Math.floor(stats.uptime)}s`);\n    }, 30000);\n    \n  } catch (error) {\n    console.error('❌ Failed to start Socket.io server:', error);\n    process.exit(1);\n  }\n}\n\n// Graceful shutdown handlers\nprocess.on('SIGINT', async () => {\n  console.log('\\n🛑 Received SIGINT, shutting down gracefully...');\n  await server.stop();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('\\n🛑 Received SIGTERM, shutting down gracefully...');\n  await server.stop();\n  process.exit(0);\n});\n\nprocess.on('uncaughtException', (error) => {\n  console.error('❌ Uncaught Exception:', error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\n// Start the server\nstartServer();\n","size_bytes":1987},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"src/main.js":{"content":"// Simple initialization for ThreeGamificationUI\nimport './app/angular-bootstrap.js';\n\n// Remove loading spinner\ndocument.addEventListener('DOMContentLoaded', () => {\n  setTimeout(() => {\n    const loading = document.getElementById('loading');\n    const app = document.getElementById('angular-app');\n    if (loading) loading.style.display = 'none';\n    if (app) app.style.display = 'flex';\n  }, 1000);\n});","size_bytes":405},"src/main.ts":{"content":"import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { appConfig } from './app/app.config';\n\n// Bootstrap the Angular application\nbootstrapApplication(AppComponent, appConfig)\n  .catch(err => console.error('Error starting app:', err));\n","size_bytes":308},"src/styles.css":{"content":"/* Global styles for ThreeGamificationUI */\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);\n  color: #ffffff;\n  overflow: hidden;\n}\n\n/* Three.js canvas styles */\ncanvas {\n  display: block;\n  outline: none;\n}\n\n/* UI Component styles */\n.ui-panel {\n  background: rgba(0, 0, 0, 0.8);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-radius: 8px;\n  backdrop-filter: blur(10px);\n  padding: 16px;\n  margin: 8px;\n}\n\n.bot-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  margin: 4px 0;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n  border-left: 4px solid #3498db;\n  transition: all 0.3s ease;\n}\n\n.bot-list-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateX(2px);\n}\n\n.bot-status {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  margin-right: 8px;\n}\n\n.bot-status.online {\n  background: #2ecc71;\n  box-shadow: 0 0 10px #2ecc71;\n}\n\n.bot-status.offline {\n  background: #e74c3c;\n}\n\n.bot-status.processing {\n  background: #f39c12;\n  animation: pulse 1.5s ease-in-out infinite alternate;\n}\n\n@keyframes pulse {\n  from {\n    opacity: 0.6;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.message-item {\n  padding: 8px 12px;\n  margin: 4px 0;\n  border-radius: 4px;\n  font-size: 0.9em;\n  border-left: 3px solid;\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.message-sys {\n  border-left-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.message-app {\n  border-left-color: #3498db;\n  background: rgba(52, 152, 219, 0.1);\n}\n\n.message-ui {\n  border-left-color: #2ecc71;\n  background: rgba(46, 204, 113, 0.1);\n}\n\n.btn {\n  background: rgba(52, 152, 219, 0.8);\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 0.9em;\n  transition: all 0.3s ease;\n}\n\n.btn:hover {\n  background: rgba(52, 152, 219, 1);\n  transform: translateY(-1px);\n}\n\n.btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.btn-danger {\n  background: rgba(231, 76, 60, 0.8);\n}\n\n.btn-danger:hover {\n  background: rgba(231, 76, 60, 1);\n}\n\n/* Scrollbar styles */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n","size_bytes":2692},"src/test.ts":{"content":"// This file is required by karma.conf.js and loads recursively all the .spec and framework files\n\nimport 'zone.js/testing';\nimport { getTestBed } from '@angular/core/testing';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from '@angular/platform-browser-dynamic/testing';\n\ndeclare const require: {\n  context(path: string, deep?: boolean, filter?: RegExp): {\n    <T>(id: string): T;\n    keys(): string[];\n  };\n};\n\n// First, initialize the Angular testing environment.\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting(),\n);\n\n// Then we find all the tests.\nconst context = require.context('./', true, /\\.spec\\.ts$/);\n// And load the modules.\ncontext.keys().forEach(context);\n","size_bytes":749},"client/src/App.tsx":{"content":"import { Canvas } from \"@react-three/fiber\";\nimport { Suspense, useEffect, useState } from \"react\";\nimport { KeyboardControls } from \"@react-three/drei\";\n// import { useAudio } from \"./lib/stores/useAudio\";\nimport \"@fontsource/inter\";\n\n// Import our game components\n\n// Define control keys for the game\n// const controls = [\n//   { name: \"forward\", keys: [\"KeyW\", \"ArrowUp\"] },\n//   { name: \"backward\", keys: [\"KeyS\", \"ArrowDown\"] },\n//   { name: \"leftward\", keys: [\"KeyA\", \"ArrowLeft\"] },\n//   { name: \"rightward\", keys: [\"KeyD\", \"ArrowRight\"] },\n//   { name: \"punch\", keys: [\"KeyJ\"] },\n//   { name: \"kick\", keys: [\"KeyK\"] },\n//   { name: \"block\", keys: [\"KeyL\"] },\n//   { name: \"special\", keys: [\"Space\"] },\n// ];\n\n// Main App component\nfunction App() {\n  //const { gamePhase } = useFighting();\n  const [showCanvas, setShowCanvas] = useState(false);\n\n  // Show the canvas once everything is loaded\n  useEffect(() => {\n    setShowCanvas(true);\n  }, []);\n\n  return (\n    <div style={{ width: '100vw', height: '100vh', position: 'relative', overflow: 'hidden' }}/>\n    // {showCanvas && (\n    //   <KeyboardControls map={controls}>\n    //     {gamePhase === 'menu' && <Menu />}\n\n    //     {gamePhase === 'character_selection' && <CharacterSelection />}\n\n    //     {(gamePhase === 'fighting' || gamePhase === 'round_end' || gamePhase === 'match_end') && (\n    //       <>\n    //         <Canvas\n    //           shadows\n    //           camera={{\n    //             position: [0, 2, 8],\n    //             fov: 45,\n    //             near: 0.1,\n    //             far: 1000\n    //           }}\n    //           gl={{\n    //             antialias: true,\n    //             powerPreference: \"default\"\n    //           }}\n    //         >\n    //           <color attach=\"background\" args={[\"#111111\"]} />\n\n    //           {/* Lighting */}\n    //           <Lights />\n\n    //           <Suspense fallback={null}>\n    //           </Suspense>\n    //         </Canvas>\n    //         <GameUI />\n    //       </>\n    //     )}\n\n    //     <ShortcutManager />\n    //     <SoundManager />\n    //   </KeyboardControls>\n    // )}\n    //</div>\n  );\n}\n\nexport default App;\n","size_bytes":2161},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":427},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"src/app/angular-bootstrap.js":{"content":"// ThreeGamificationUI - Simplified Bootstrap\n// This file initializes the 3D scene and UI components manually\n\nimport * as THREE from 'three';\nimport { io } from 'socket.io-client';\n\nclass ThreeGamificationUI {\n  constructor() {\n    this.scene = null;\n    this.camera = null;\n    this.renderer = null;\n    this.socket = null;\n    this.botPositions = [];\n    this.bots = new Map();\n    this.animationId = null;\n\n    // Bot configuration - 8 bots on cardinal spirals\n    this.BOT_CONFIG = [\n      { id: 'bot-n1', name: 'North 1', position: { x: 0, y: 2, z: 8 }, cardinal: 'North' },\n      { id: 'bot-n2', name: 'North 2', position: { x: 0, y: 4, z: 12 }, cardinal: 'North' },\n      { id: 'bot-s1', name: 'South 1', position: { x: 0, y: 2, z: -8 }, cardinal: 'South' },\n      { id: 'bot-s2', name: 'South 2', position: { x: 0, y: 4, z: -12 }, cardinal: 'South' },\n      { id: 'bot-e1', name: 'East 1', position: { x: 8, y: 2, z: 0 }, cardinal: 'East' },\n      { id: 'bot-e2', name: 'East 2', position: { x: 12, y: 4, z: 0 }, cardinal: 'East' },\n      { id: 'bot-w1', name: 'West 1', position: { x: -8, y: 2, z: 0 }, cardinal: 'West' },\n      { id: 'bot-w2', name: 'West 2', position: { x: -12, y: 4, z: 0 }, cardinal: 'West' }\n    ];\n  }\n\n  async init() {\n    console.log('Initializing ThreeGamificationUI...');\n    \n    // Initialize Three.js scene\n    this.initThreeScene();\n    \n    // Initialize Socket.io connection\n    this.initSocket();\n    \n    // Initialize UI components\n    this.initUI();\n    \n    // Start render loop\n    this.animate();\n    \n    console.log('ThreeGamificationUI initialized successfully!');\n  }\n\n  initThreeScene() {\n    const canvas = document.getElementById('three-canvas');\n    const container = canvas.parentElement;\n\n    // Scene setup\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x111827);\n\n    // Camera setup\n    this.camera = new THREE.PerspectiveCamera(\n      75, \n      container.clientWidth / container.clientHeight, \n      0.1, \n      1000\n    );\n    this.camera.position.set(15, 15, 15);\n    this.camera.lookAt(0, 0, 0);\n\n    // Renderer setup\n    this.renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n    this.renderer.setSize(container.clientWidth, container.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    this.scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(10, 10, 5);\n    directionalLight.castShadow = true;\n    this.scene.add(directionalLight);\n\n    // Create central Socket.io hub\n    this.createCentralHub();\n    \n    // Create bot positions\n    this.createBotPositions();\n\n    // Handle window resize\n    window.addEventListener('resize', () => {\n      this.camera.aspect = container.clientWidth / container.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(container.clientWidth, container.clientHeight);\n    });\n  }\n\n  createCentralHub() {\n    // Central hub geometry\n    const hubGeometry = new THREE.SphereGeometry(1, 16, 16);\n    const hubMaterial = new THREE.MeshPhongMaterial({ \n      color: 0x00ff88,\n      transparent: true,\n      opacity: 0.8\n    });\n    const hub = new THREE.Mesh(hubGeometry, hubMaterial);\n    hub.position.set(0, 0, 0);\n    this.scene.add(hub);\n\n    // Hub pulsing animation\n    const originalScale = hub.scale.x;\n    const animate = () => {\n      const time = Date.now() * 0.002;\n      const scale = originalScale + Math.sin(time) * 0.1;\n      hub.scale.setScalar(scale);\n    };\n    this.hubAnimation = animate;\n  }\n\n  createBotPositions() {\n    this.BOT_CONFIG.forEach(botConfig => {\n      // Bot mesh\n      const geometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);\n      const material = new THREE.MeshPhongMaterial({ \n        color: this.getBotColor(botConfig.cardinal),\n        transparent: true,\n        opacity: 0.7\n      });\n      const botMesh = new THREE.Mesh(geometry, material);\n      botMesh.position.copy(botConfig.position);\n      botMesh.userData = { botId: botConfig.id, originalPosition: { ...botConfig.position } };\n      \n      this.scene.add(botMesh);\n      this.botPositions.push(botMesh);\n\n      // Connection line to hub\n      const lineGeometry = new THREE.BufferGeometry().setFromPoints([\n        new THREE.Vector3(0, 0, 0),\n        new THREE.Vector3(botConfig.position.x, botConfig.position.y, botConfig.position.z)\n      ]);\n      const lineMaterial = new THREE.LineBasicMaterial({ \n        color: this.getBotColor(botConfig.cardinal),\n        opacity: 0.3,\n        transparent: true\n      });\n      const line = new THREE.Line(lineGeometry, lineMaterial);\n      this.scene.add(line);\n\n      // Initialize bot state\n      this.bots.set(botConfig.id, {\n        ...botConfig,\n        status: 'inactive',\n        mesh: botMesh,\n        line: line\n      });\n    });\n  }\n\n  getBotColor(cardinal) {\n    const colors = {\n      'North': 0xff4444,\n      'South': 0x44ff44,\n      'East': 0x4444ff,\n      'West': 0xffff44\n    };\n    return colors[cardinal] || 0xffffff;\n  }\n\n  initSocket() {\n    this.socket = io('/', {\n      transports: ['websocket', 'polling']\n    });\n\n    this.socket.on('connect', () => {\n      console.log('Socket connected:', this.socket.id);\n      this.addMessage('Socket.io connection established', 'sys');\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      this.addMessage('Socket.io connection lost', 'sys');\n    });\n\n    this.socket.on('bot:status', (data) => {\n      this.updateBotStatus(data.botId, data.status);\n      this.addMessage(`Bot ${data.botId}: ${data.status}`, 'app');\n    });\n\n    this.socket.on('message', (data) => {\n      this.addMessage(`${data.botId}: ${data.message}`, data.channel || 'app');\n      this.animateMessageParticle(data.botId);\n    });\n  }\n\n  initUI() {\n    // Populate bot list\n    this.updateBotList();\n    \n    // Add control event listeners\n    this.setupBotControls();\n  }\n\n  updateBotList() {\n    const botListElement = document.getElementById('bot-list');\n    botListElement.innerHTML = '';\n\n    this.bots.forEach((bot, botId) => {\n      const botItem = document.createElement('div');\n      botItem.className = 'bot-item';\n      botItem.innerHTML = `\n        <span>${bot.name} (${bot.cardinal})</span>\n        <span class=\"status-${bot.status}\">${bot.status.toUpperCase()}</span>\n        <button class=\"${bot.status === 'active' ? 'stop-btn' : 'start-btn'} control-button\" \n                data-bot-id=\"${botId}\" \n                data-action=\"${bot.status === 'active' ? 'stop' : 'start'}\">\n          ${bot.status === 'active' ? 'Stop' : 'Start'}\n        </button>\n      `;\n      botListElement.appendChild(botItem);\n    });\n  }\n\n  setupBotControls() {\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('control-button')) {\n        const botId = e.target.dataset.botId;\n        const action = e.target.dataset.action;\n        this.controlBot(botId, action);\n      }\n    });\n  }\n\n  controlBot(botId, action) {\n    const newStatus = action === 'start' ? 'active' : 'inactive';\n    \n    // Emit to server\n    this.socket.emit('bot:control', { botId, action, status: newStatus });\n    \n    // Update local state\n    this.updateBotStatus(botId, newStatus);\n    this.addMessage(`Bot ${botId} ${action} command sent`, 'ui');\n  }\n\n  updateBotStatus(botId, status) {\n    const bot = this.bots.get(botId);\n    if (bot) {\n      bot.status = status;\n      \n      // Update 3D visualization\n      if (bot.mesh) {\n        bot.mesh.material.opacity = status === 'active' ? 1.0 : 0.5;\n        bot.line.material.opacity = status === 'active' ? 0.6 : 0.2;\n      }\n      \n      // Update UI\n      this.updateBotList();\n    }\n  }\n\n  addMessage(message, channel = 'app') {\n    const messageLog = document.getElementById('message-log');\n    const messageItem = document.createElement('div');\n    messageItem.className = `message-item message-${channel}`;\n    \n    const timestamp = new Date().toLocaleTimeString();\n    messageItem.textContent = `[${timestamp}] ${message}`;\n    \n    messageLog.appendChild(messageItem);\n    messageLog.scrollTop = messageLog.scrollHeight;\n    \n    // Keep only last 50 messages\n    while (messageLog.children.length > 50) {\n      messageLog.removeChild(messageLog.firstChild);\n    }\n  }\n\n  animateMessageParticle(botId) {\n    const bot = this.bots.get(botId);\n    if (!bot || !bot.mesh) return;\n\n    // Create particle\n    const particleGeometry = new THREE.SphereGeometry(0.1, 8, 8);\n    const particleMaterial = new THREE.MeshBasicMaterial({ \n      color: this.getBotColor(bot.cardinal),\n      transparent: true,\n      opacity: 0.8\n    });\n    const particle = new THREE.Mesh(particleGeometry, particleMaterial);\n    \n    // Start at bot position\n    particle.position.copy(bot.mesh.position);\n    this.scene.add(particle);\n\n    // Animate to center\n    const startPos = bot.mesh.position.clone();\n    const endPos = new THREE.Vector3(0, 0, 0);\n    let progress = 0;\n\n    const animateParticle = () => {\n      progress += 0.05;\n      \n      if (progress >= 1) {\n        this.scene.remove(particle);\n        return;\n      }\n\n      // Lerp position with slight curve\n      particle.position.lerpVectors(startPos, endPos, progress);\n      particle.position.y += Math.sin(progress * Math.PI) * 2;\n      \n      requestAnimationFrame(animateParticle);\n    };\n\n    animateParticle();\n  }\n\n  animate() {\n    this.animationId = requestAnimationFrame(() => this.animate());\n\n    // Update hub animation\n    if (this.hubAnimation) {\n      this.hubAnimation();\n    }\n\n    // Update bot bobbing animation\n    const time = Date.now() * 0.001;\n    this.botPositions.forEach((bot, index) => {\n      if (bot.userData.originalPosition) {\n        const bobOffset = Math.sin(time + index * 0.5) * 0.2;\n        bot.position.y = bot.userData.originalPosition.y + bobOffset;\n      }\n    });\n\n    // Render\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  destroy() {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n}\n\n// Initialize the application\nconst app = new ThreeGamificationUI();\napp.init().catch(console.error);\n\n// Export for global access\nwindow.ThreeGamificationUI = app;\n\nexport default app;","size_bytes":10528},"src/app/app.component.css":{"content":".app-container {\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.9);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n}\n\n.loading-overlay .spinner {\n  border: 4px solid #333;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 20px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.canvas-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n.ui-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  pointer-events: none;\n}\n\n.ui-overlay > * {\n  pointer-events: auto;\n}\n\n.header-panel {\n  position: absolute;\n  top: 16px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  min-width: 400px;\n}\n\n.header-panel h1 {\n  font-size: 1.5em;\n  font-weight: 600;\n  margin: 0;\n}\n\n.connection-status {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 0.9em;\n}\n\n.status-indicator {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #e74c3c;\n  transition: background-color 0.3s ease;\n}\n\n.status-indicator.connected {\n  background: #2ecc71;\n  box-shadow: 0 0 10px rgba(46, 204, 113, 0.5);\n}\n\n.status-indicator.connecting {\n  background: #f39c12;\n  animation: pulse 1s infinite;\n}\n\n.left-panel {\n  position: absolute;\n  top: 100px;\n  left: 16px;\n  width: 280px;\n  max-height: calc(100vh - 200px);\n  overflow-y: auto;\n}\n\n.right-panel {\n  position: absolute;\n  top: 100px;\n  right: 16px;\n  width: 320px;\n  max-height: calc(100vh - 200px);\n  overflow-y: auto;\n}\n\n.bottom-panel {\n  position: absolute;\n  bottom: 16px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.performance-info {\n  font-size: 0.8em;\n  color: #bbb;\n  font-family: 'Courier New', monospace;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .header-panel {\n    flex-direction: column;\n    gap: 8px;\n    min-width: 300px;\n  }\n  \n  .left-panel,\n  .right-panel {\n    position: relative;\n    width: 100%;\n    max-height: 300px;\n    margin: 8px;\n  }\n  \n  .left-panel {\n    top: 120px;\n  }\n  \n  .right-panel {\n    top: 440px;\n  }\n  \n  .bottom-panel {\n    bottom: 8px;\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n}\n","size_bytes":2553},"src/app/app.component.ts":{"content":"import { Component, OnInit, OnDestroy, ElementRef, ViewChild, AfterViewInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { BotListComponent } from './features/bot-management/bot-list.component';\nimport { MessagePanelComponent } from './features/message-panel/message-panel.component';\nimport { ThreeSceneService } from './shared/three/three-scene.service';\nimport { RxjsSocketBridge } from './core/bridge/rxjs-socket-bridge';\nimport { SocketService } from './core/services/socket.service';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    CommonModule,\n    BotListComponent,\n    MessagePanelComponent\n  ],\n  template: `\n    <div class=\"app-container\">\n      <!-- Loading overlay -->\n      <div class=\"loading-overlay\" *ngIf=\"isLoading\">\n        <div class=\"spinner\"></div>\n        <p>Initializing 3D Scene & Socket Connection...</p>\n      </div>\n\n      <!-- Three.js Canvas Container -->\n      <div class=\"canvas-container\" #canvasContainer></div>\n      \n      <!-- UI Overlay -->\n      <div class=\"ui-overlay\">\n        <!-- Top Header -->\n        <div class=\"header-panel ui-panel\">\n          <h1>ThreeGamificationUI</h1>\n          <div class=\"connection-status\">\n            <span class=\"status-indicator\" [class]=\"connectionStatus\"></span>\n            Socket.io: {{ connectionStatus.toUpperCase() }}\n          </div>\n        </div>\n        \n        <!-- Left Panel - Bot Management -->\n        <div class=\"left-panel\">\n          <app-bot-list></app-bot-list>\n        </div>\n        \n        <!-- Right Panel - Message Stream -->\n        <div class=\"right-panel\">\n          <app-message-panel></app-message-panel>\n        </div>\n        \n        <!-- Bottom Panel - Controls -->\n        <div class=\"bottom-panel ui-panel\">\n          <button class=\"btn\" (click)=\"toggleDemo()\">\n            {{ isDemoRunning ? 'Stop Demo' : 'Start Demo' }}\n          </button>\n          <button class=\"btn\" (click)=\"resetScene()\">Reset Scene</button>\n          <span class=\"performance-info\">FPS: {{ currentFPS }}</span>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewChild('canvasContainer', { static: true }) canvasContainer!: ElementRef;\n  \n  private destroy$ = new Subject<void>();\n  \n  // Component state\n  isLoading = true;\n  connectionStatus = 'disconnected';\n  isDemoRunning = false;\n  currentFPS = 0;\n\n  constructor(\n    private threeSceneService: ThreeSceneService,\n    private socketService: SocketService,\n    private rxjsSocketBridge: RxjsSocketBridge\n  ) {}\n\n  ngOnInit() {\n    console.log('ThreeGamificationUI initializing...');\n    \n    // Subscribe to connection status\n    this.socketService.connectionStatus$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(status => {\n        this.connectionStatus = status;\n        console.log('Connection status:', status);\n      });\n\n    // Initialize Socket.io connection\n    this.socketService.connect();\n  }\n\n  ngAfterViewInit() {\n    // Initialize Three.js scene after view is ready\n    setTimeout(() => {\n      this.initializeThreeScene();\n    }, 100);\n  }\n\n  private async initializeThreeScene() {\n    try {\n      console.log('Initializing Three.js scene...');\n      \n      // Initialize Three.js scene\n      await this.threeSceneService.initialize(this.canvasContainer.nativeElement);\n      \n      // Start render loop\n      this.threeSceneService.startRenderLoop();\n      \n      // Subscribe to FPS updates\n      this.threeSceneService.fps$\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(fps => {\n          this.currentFPS = Math.round(fps);\n        });\n\n      // Mark as loaded\n      this.isLoading = false;\n      \n      // Hide initial loading indicator\n      const loadingElement = document.getElementById('loading');\n      if (loadingElement) {\n        loadingElement.style.display = 'none';\n      }\n      \n      console.log('Three.js scene initialized successfully');\n      \n    } catch (error) {\n      console.error('Failed to initialize Three.js scene:', error);\n      this.isLoading = false;\n    }\n  }\n\n  toggleDemo() {\n    if (this.isDemoRunning) {\n      console.log('Stopping demo...');\n      // TODO: Stop demo client\n      this.isDemoRunning = false;\n    } else {\n      console.log('Starting demo...');\n      // TODO: Start demo client\n      this.isDemoRunning = true;\n    }\n  }\n\n  resetScene() {\n    console.log('Resetting scene...');\n    this.threeSceneService.reset();\n  }\n\n  ngOnDestroy() {\n    console.log('App component destroying...');\n    \n    // Clean up subscriptions\n    this.destroy$.next();\n    this.destroy$.complete();\n    \n    // Clean up services\n    this.threeSceneService.dispose();\n    this.socketService.disconnect();\n  }\n}\n","size_bytes":4876},"src/app/app.config.ts":{"content":"import { ApplicationConfig, importProvidersFrom } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter([]),\n    importProvidersFrom(\n      BrowserModule,\n      HttpClientModule,\n      BrowserAnimationsModule\n    )\n  ]\n};\n","size_bytes":515},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"src/app/demo/demo-client.ts":{"content":"import { io, Socket } from 'socket.io-client';\nimport { \n  ChannelType, \n  MessageType, \n  BotStatusMessage,\n  BotCommandMessage,\n  HealthCheckMessage,\n  UserActionMessage,\n  SystemEventMessage\n} from '../core/bridge/interfaces';\n\nexport interface DemoConfig {\n  serverUrl: string;\n  scenarios: string[];\n  messageInterval: number;\n  duration: number;\n}\n\nexport class DemoClient {\n  private socket: Socket | null = null;\n  private isRunning = false;\n  private intervalId: any = null;\n  private messageCounter = 0;\n  \n  private botIds = [\n    'bot_north_1', 'bot_north_2',\n    'bot_east_1', 'bot_east_2',\n    'bot_south_1', 'bot_south_2',\n    'bot_west_1', 'bot_west_2'\n  ];\n\n  constructor(private config: DemoConfig) {\n    console.log('DemoClient created with config:', config);\n  }\n\n  /**\n   * Connect to the Socket.io server\n   */\n  async connect(): Promise<boolean> {\n    return new Promise((resolve) => {\n      console.log('Demo client connecting to:', this.config.serverUrl);\n      \n      this.socket = io(this.config.serverUrl, {\n        autoConnect: true,\n        timeout: 10000\n      });\n\n      this.socket.on('connect', () => {\n        console.log('Demo client connected');\n        resolve(true);\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('Demo client connection error:', error);\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * Start the demo simulation\n   */\n  start(): void {\n    if (this.isRunning || !this.socket?.connected) {\n      console.warn('Demo already running or not connected');\n      return;\n    }\n\n    console.log('Starting demo simulation...');\n    this.isRunning = true;\n    this.messageCounter = 0;\n\n    // Start message generation loop\n    this.intervalId = setInterval(() => {\n      this.generateDemoMessage();\n    }, this.config.messageInterval);\n\n    // Send initial system event\n    this.sendSystemEvent('demo_started', 'info', {\n      scenarios: this.config.scenarios,\n      duration: this.config.duration\n    });\n  }\n\n  /**\n   * Stop the demo simulation\n   */\n  stop(): void {\n    if (!this.isRunning) {\n      console.warn('Demo not running');\n      return;\n    }\n\n    console.log('Stopping demo simulation...');\n    this.isRunning = false;\n\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    // Send stop event\n    this.sendSystemEvent('demo_stopped', 'info', {\n      totalMessages: this.messageCounter\n    });\n  }\n\n  /**\n   * Disconnect from server\n   */\n  disconnect(): void {\n    this.stop();\n    \n    if (this.socket) {\n      console.log('Demo client disconnecting...');\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  /**\n   * Generate a random demo message based on scenarios\n   */\n  private generateDemoMessage(): void {\n    if (!this.socket?.connected) return;\n\n    const scenarios = this.config.scenarios.length > 0 \n      ? this.config.scenarios \n      : ['bot_status', 'health_check', 'user_actions'];\n    \n    const scenario = scenarios[Math.floor(Math.random() * scenarios.length)];\n    \n    switch (scenario) {\n      case 'bot_status':\n        this.generateBotStatusMessage();\n        break;\n      case 'health_check':\n        this.generateHealthCheckMessage();\n        break;\n      case 'user_actions':\n        this.generateUserActionMessage();\n        break;\n      case 'system_events':\n        this.generateSystemEventMessage();\n        break;\n      case 'bot_commands':\n        this.generateBotCommandMessage();\n        break;\n      default:\n        this.generateRandomMessage();\n    }\n    \n    this.messageCounter++;\n  }\n\n  /**\n   * Generate bot status messages\n   */\n  private generateBotStatusMessage(): void {\n    const botId = this.getRandomBotId();\n    const statuses: Array<'online' | 'offline' | 'processing'> = ['online', 'offline', 'processing'];\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    \n    const message: BotStatusMessage = {\n      id: this.generateMessageId(),\n      timestamp: Date.now(),\n      channel: ChannelType.SYS,\n      type: MessageType.BOT_STATUS,\n      botId,\n      status,\n      position: this.getBotPosition(botId)\n    };\n\n    this.emit(ChannelType.SYS, message);\n  }\n\n  /**\n   * Generate health check messages\n   */\n  private generateHealthCheckMessage(): void {\n    const message: HealthCheckMessage = {\n      id: this.generateMessageId(),\n      timestamp: Date.now(),\n      channel: ChannelType.SYS,\n      type: MessageType.HEALTH_CHECK,\n      systemHealth: {\n        cpu: Math.random() * 100,\n        memory: Math.random() * 100,\n        connections: Math.floor(Math.random() * 50) + 1\n      }\n    };\n\n    this.emit(ChannelType.SYS, message);\n  }\n\n  /**\n   * Generate user action messages\n   */\n  private generateUserActionMessage(): void {\n    const actions = ['bot_selected', 'filter_changed', 'scene_reset', 'demo_toggled'];\n    const action = actions[Math.floor(Math.random() * actions.length)];\n    \n    const message: UserActionMessage = {\n      id: this.generateMessageId(),\n      timestamp: Date.now(),\n      channel: ChannelType.UI,\n      type: MessageType.USER_ACTION,\n      action,\n      data: {\n        botId: this.getRandomBotId(),\n        value: Math.random() > 0.5\n      }\n    };\n\n    this.emit(ChannelType.UI, message);\n  }\n\n  /**\n   * Generate system event messages\n   */\n  private generateSystemEventMessage(): void {\n    const events = [\n      { event: 'connection_established', severity: 'info' as const },\n      { event: 'high_cpu_usage', severity: 'warning' as const },\n      { event: 'memory_limit_reached', severity: 'error' as const },\n      { event: 'bot_synchronized', severity: 'info' as const }\n    ];\n    \n    const { event, severity } = events[Math.floor(Math.random() * events.length)];\n    \n    const message: SystemEventMessage = {\n      id: this.generateMessageId(),\n      timestamp: Date.now(),\n      channel: ChannelType.SYS,\n      type: MessageType.SYSTEM_EVENT,\n      event,\n      severity,\n      data: {\n        details: `Simulated ${event} event`,\n        metric: Math.random() * 100\n      }\n    };\n\n    this.emit(ChannelType.SYS, message);\n  }\n\n  /**\n   * Generate bot command messages\n   */\n  private generateBotCommandMessage(): void {\n    const commands: Array<'start' | 'stop' | 'reset' | 'configure'> = ['start', 'stop', 'reset', 'configure'];\n    const command = commands[Math.floor(Math.random() * commands.length)];\n    const botId = this.getRandomBotId();\n    \n    const message: BotCommandMessage = {\n      id: this.generateMessageId(),\n      timestamp: Date.now(),\n      channel: ChannelType.APP,\n      type: MessageType.BOT_COMMAND,\n      botId,\n      command,\n      params: command === 'configure' ? { \n        setting: 'demo_mode',\n        value: true \n      } : undefined\n    };\n\n    this.emit(ChannelType.APP, message);\n  }\n\n  /**\n   * Generate random message for variety\n   */\n  private generateRandomMessage(): void {\n    const generators = [\n      () => this.generateBotStatusMessage(),\n      () => this.generateHealthCheckMessage(),\n      () => this.generateUserActionMessage(),\n      () => this.generateSystemEventMessage(),\n      () => this.generateBotCommandMessage()\n    ];\n    \n    const generator = generators[Math.floor(Math.random() * generators.length)];\n    generator();\n  }\n\n  /**\n   * Send system event message\n   */\n  private sendSystemEvent(event: string, severity: 'info' | 'warning' | 'error', data?: any): void {\n    const message: SystemEventMessage = {\n      id: this.generateMessageId(),\n      timestamp: Date.now(),\n      channel: ChannelType.SYS,\n      type: MessageType.SYSTEM_EVENT,\n      event,\n      severity,\n      data\n    };\n\n    this.emit(ChannelType.SYS, message);\n  }\n\n  /**\n   * Emit message to specific channel\n   */\n  private emit(channel: ChannelType, message: any): void {\n    if (!this.socket?.connected) return;\n    \n    this.socket.emit(`${channel}_message`, message);\n    console.log(`[Demo] Sent ${channel} message:`, message.type);\n  }\n\n  /**\n   * Get random bot ID\n   */\n  private getRandomBotId(): string {\n    return this.botIds[Math.floor(Math.random() * this.botIds.length)];\n  }\n\n  /**\n   * Get bot position by ID\n   */\n  private getBotPosition(botId: string): { x: number; y: number; z: number } {\n    // Simple hash-based position generation for consistency\n    const hash = this.simpleHash(botId);\n    const angle = (hash % 8) * (Math.PI / 4);\n    const radius = 5 + ((hash % 3) * 2);\n    \n    return {\n      x: Math.cos(angle) * radius,\n      y: (hash % 2) * 0.5,\n      z: Math.sin(angle) * radius\n    };\n  }\n\n  /**\n   * Simple hash function for consistent positions\n   */\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  /**\n   * Generate unique message ID\n   */\n  private generateMessageId(): string {\n    return `demo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Check if demo is running\n   */\n  isActive(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * Get message count\n   */\n  getMessageCount(): number {\n    return this.messageCounter;\n  }\n\n  /**\n   * Get connection status\n   */\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n}\n","size_bytes":9398},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"src/app/core/bridge/interfaces.ts":{"content":"// Core interfaces for the RxJS-Socket.io bridge\n\nexport enum ChannelType {\n  SYS = 'sys',\n  APP = 'app',\n  UI = 'ui'\n}\n\nexport enum MessageType {\n  BOT_STATUS = 'bot_status',\n  BOT_COMMAND = 'bot_command',\n  HEALTH_CHECK = 'health_check',\n  USER_ACTION = 'user_action',\n  SYSTEM_EVENT = 'system_event'\n}\n\nexport interface BaseMessage {\n  id: string;\n  timestamp: number;\n  channel: ChannelType;\n  type: MessageType;\n  source?: string;\n  target?: string;\n}\n\nexport interface BotStatusMessage extends BaseMessage {\n  type: MessageType.BOT_STATUS;\n  botId: string;\n  status: 'online' | 'offline' | 'processing';\n  position?: {\n    x: number;\n    y: number;\n    z: number;\n  };\n}\n\nexport interface BotCommandMessage extends BaseMessage {\n  type: MessageType.BOT_COMMAND;\n  botId: string;\n  command: 'start' | 'stop' | 'reset' | 'configure';\n  params?: Record<string, any>;\n}\n\nexport interface HealthCheckMessage extends BaseMessage {\n  type: MessageType.HEALTH_CHECK;\n  systemHealth: {\n    cpu: number;\n    memory: number;\n    connections: number;\n  };\n}\n\nexport interface UserActionMessage extends BaseMessage {\n  type: MessageType.USER_ACTION;\n  action: string;\n  data?: Record<string, any>;\n}\n\nexport interface SystemEventMessage extends BaseMessage {\n  type: MessageType.SYSTEM_EVENT;\n  event: string;\n  severity: 'info' | 'warning' | 'error';\n  data?: Record<string, any>;\n}\n\nexport type SocketMessage = \n  | BotStatusMessage \n  | BotCommandMessage \n  | HealthCheckMessage \n  | UserActionMessage \n  | SystemEventMessage;\n\nexport interface Room {\n  id: string;\n  name: string;\n  subscribers: number;\n}\n\nexport interface ConnectionConfig {\n  url: string;\n  options?: {\n    autoConnect?: boolean;\n    timeout?: number;\n    reconnection?: boolean;\n    reconnectionAttempts?: number;\n    reconnectionDelay?: number;\n    maxReconnectionDelay?: number;\n    reconnectionDelayMax?: number;\n    randomizationFactor?: number;\n  };\n}\n\nexport interface BridgeEvent {\n  type: 'connection' | 'disconnection' | 'message' | 'error';\n  data?: any;\n  timestamp: number;\n}\n\nexport interface ChannelManager {\n  subscribe(channel: ChannelType, callback: (message: SocketMessage) => void): void;\n  unsubscribe(channel: ChannelType, callback?: (message: SocketMessage) => void): void;\n  emit(channel: ChannelType, message: SocketMessage): void;\n  getActiveChannels(): ChannelType[];\n}\n\nexport interface RoomManager {\n  join(roomId: string): Promise<boolean>;\n  leave(roomId: string): Promise<boolean>;\n  getRooms(): Room[];\n  isInRoom(roomId: string): boolean;\n}\n\nexport interface ReconnectionHandler {\n  start(): void;\n  stop(): void;\n  getAttempts(): number;\n  isReconnecting(): boolean;\n}\n","size_bytes":2670},"src/app/core/bridge/rxjs-socket-bridge.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject, Observable, timer, NEVER } from 'rxjs';\nimport { \n  filter, \n  map, \n  takeUntil, \n  retry, \n  retryWhen, \n  delay, \n  mergeMap,\n  scan,\n  throttleTime,\n  debounceTime,\n  share,\n  shareReplay\n} from 'rxjs/operators';\nimport { io, Socket } from 'socket.io-client';\n\nimport {\n  ChannelType,\n  MessageType,\n  SocketMessage,\n  BaseMessage,\n  BridgeEvent,\n  ConnectionConfig,\n  ChannelManager,\n  RoomManager,\n  ReconnectionHandler,\n  Room\n} from './interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxjsSocketBridge implements ChannelManager, RoomManager, ReconnectionHandler {\n  private socket: Socket | null = null;\n  private destroy$ = new Subject<void>();\n  \n  // Core subjects for reactive streams\n  private connectionStatus$ = new BehaviorSubject<string>('disconnected');\n  private messageStream$ = new Subject<SocketMessage>();\n  private errorStream$ = new Subject<Error>();\n  private bridgeEvents$ = new Subject<BridgeEvent>();\n  \n  // Channel-specific streams\n  private sysChannel$ = new Subject<SocketMessage>();\n  private appChannel$ = new Subject<SocketMessage>();\n  private uiChannel$ = new Subject<SocketMessage>();\n  \n  // State management\n  private activeRooms = new Set<string>();\n  private reconnectionAttempts = 0;\n  private maxReconnectionAttempts = 5;\n  private isReconnecting$ = new BehaviorSubject<boolean>(false);\n  private reconnectionTimer: any = null;\n\n  // Public observables\n  public readonly connectionStatus = this.connectionStatus$.asObservable();\n  public readonly messages = this.messageStream$.asObservable().pipe(shareReplay(1));\n  public readonly errors = this.errorStream$.asObservable();\n  public readonly events = this.bridgeEvents$.asObservable();\n  public readonly isReconnecting = this.isReconnecting$.asObservable();\n\n  // Channel-specific observables\n  public readonly sysMessages = this.sysChannel$.asObservable().pipe(shareReplay(1));\n  public readonly appMessages = this.appChannel$.asObservable().pipe(shareReplay(1));\n  public readonly uiMessages = this.uiChannel$.asObservable().pipe(shareReplay(1));\n\n  constructor() {\n    console.log('RxjsSocketBridge initialized');\n    \n    // Set up message distribution pipeline\n    this.setupMessagePipeline();\n    \n    // Set up reconnection handling\n    this.setupReconnectionHandler();\n  }\n\n  /**\n   * Initialize connection to Socket.io server\n   */\n  connect(config?: ConnectionConfig): void {\n    const defaultConfig: ConnectionConfig = {\n      url: `http://localhost:8000`,\n      options: {\n        autoConnect: true,\n        timeout: 20000,\n        reconnection: true,\n        reconnectionAttempts: this.maxReconnectionAttempts,\n        reconnectionDelay: 1000,\n        maxReconnectionDelay: 5000,\n        reconnectionDelayMax: 5000,\n        randomizationFactor: 0.5\n      }\n    };\n\n    const finalConfig = config || defaultConfig;\n    \n    console.log('Connecting to Socket.io server:', finalConfig.url);\n    \n    try {\n      // Create socket connection\n      this.socket = io(finalConfig.url, finalConfig.options);\n      \n      // Set up event handlers\n      this.setupSocketEventHandlers();\n      \n      // Emit bridge event\n      this.bridgeEvents$.next({\n        type: 'connection',\n        data: { config: finalConfig },\n        timestamp: Date.now()\n      });\n      \n    } catch (error) {\n      console.error('Failed to create socket connection:', error);\n      this.errorStream$.next(error as Error);\n    }\n  }\n\n  /**\n   * Disconnect from Socket.io server\n   */\n  disconnect(): void {\n    console.log('Disconnecting from Socket.io server');\n    \n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    this.connectionStatus$.next('disconnected');\n    this.activeRooms.clear();\n    this.stopReconnection();\n    \n    this.bridgeEvents$.next({\n      type: 'disconnection',\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * Set up Socket.io event handlers\n   */\n  private setupSocketEventHandlers(): void {\n    if (!this.socket) return;\n\n    // Connection events\n    this.socket.on('connect', () => {\n      console.log('Socket.io connected');\n      this.connectionStatus$.next('connected');\n      this.reconnectionAttempts = 0;\n      this.isReconnecting$.next(false);\n      this.stopReconnection();\n    });\n\n    this.socket.on('disconnect', (reason) => {\n      console.log('Socket.io disconnected:', reason);\n      this.connectionStatus$.next('disconnected');\n      \n      if (reason !== 'io client disconnect') {\n        this.startReconnection();\n      }\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.error('Socket.io connection error:', error);\n      this.connectionStatus$.next('error');\n      this.errorStream$.next(error);\n      this.startReconnection();\n    });\n\n    // Message events\n    this.socket.on('message', (data: SocketMessage) => {\n      this.handleIncomingMessage(data);\n    });\n\n    // Channel-specific events\n    Object.values(ChannelType).forEach(channel => {\n      this.socket!.on(`${channel}_message`, (data: SocketMessage) => {\n        data.channel = channel as ChannelType;\n        this.handleIncomingMessage(data);\n      });\n    });\n\n    // Room events\n    this.socket.on('room_joined', (roomId: string) => {\n      console.log('Joined room:', roomId);\n      this.activeRooms.add(roomId);\n    });\n\n    this.socket.on('room_left', (roomId: string) => {\n      console.log('Left room:', roomId);\n      this.activeRooms.delete(roomId);\n    });\n  }\n\n  /**\n   * Handle incoming messages and route to appropriate channels\n   */\n  private handleIncomingMessage(message: SocketMessage): void {\n    try {\n      // Add timestamp if not present\n      if (!message.timestamp) {\n        message.timestamp = Date.now();\n      }\n\n      // Add unique ID if not present\n      if (!message.id) {\n        message.id = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      console.log('Received message:', message);\n\n      // Emit to main stream\n      this.messageStream$.next(message);\n\n      // Route to channel-specific streams\n      switch (message.channel) {\n        case ChannelType.SYS:\n          this.sysChannel$.next(message);\n          break;\n        case ChannelType.APP:\n          this.appChannel$.next(message);\n          break;\n        case ChannelType.UI:\n          this.uiChannel$.next(message);\n          break;\n      }\n\n      // Emit bridge event\n      this.bridgeEvents$.next({\n        type: 'message',\n        data: message,\n        timestamp: Date.now()\n      });\n\n    } catch (error) {\n      console.error('Error handling incoming message:', error);\n      this.errorStream$.next(error as Error);\n    }\n  }\n\n  /**\n   * Set up message distribution pipeline with RxJS operators\n   */\n  private setupMessagePipeline(): void {\n    // Throttled message processing to prevent flooding\n    const throttledMessages$ = this.messageStream$.pipe(\n      throttleTime(50), // Max 20 messages per second\n      takeUntil(this.destroy$)\n    );\n\n    // Debounced high-frequency events\n    const debouncedEvents$ = this.messageStream$.pipe(\n      filter(msg => msg.type === MessageType.HEALTH_CHECK),\n      debounceTime(1000), // Debounce health checks\n      takeUntil(this.destroy$)\n    );\n\n    // Subscribe to processed streams\n    throttledMessages$.subscribe(msg => {\n      // Additional processing if needed\n    });\n\n    debouncedEvents$.subscribe(msg => {\n      console.log('Processed health check:', msg);\n    });\n  }\n\n  /**\n   * Set up automatic reconnection handling\n   */\n  private setupReconnectionHandler(): void {\n    this.connectionStatus$.pipe(\n      filter(status => status === 'disconnected' || status === 'error'),\n      debounceTime(1000),\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      if (!this.isReconnecting$.value && this.reconnectionAttempts < this.maxReconnectionAttempts) {\n        this.startReconnection();\n      }\n    });\n  }\n\n  // ChannelManager implementation\n  subscribe(channel: ChannelType, callback: (message: SocketMessage) => void): void {\n    const stream$ = this.getChannelStream(channel);\n    stream$.pipe(takeUntil(this.destroy$)).subscribe(callback);\n  }\n\n  unsubscribe(channel: ChannelType, callback?: (message: SocketMessage) => void): void {\n    // Note: In a production app, you'd want to manage subscriptions more granularly\n    console.log(`Unsubscribe request for channel: ${channel}`);\n  }\n\n  emit(channel: ChannelType, message: SocketMessage): void {\n    if (!this.socket || !this.socket.connected) {\n      console.warn('Cannot emit message: Socket not connected');\n      return;\n    }\n\n    try {\n      // Ensure message has required fields\n      const enrichedMessage: SocketMessage = {\n        ...message,\n        id: message.id || `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: message.timestamp || Date.now(),\n        channel\n      };\n\n      // Emit to specific channel\n      this.socket.emit(`${channel}_message`, enrichedMessage);\n      \n      console.log('Emitted message to channel:', channel, enrichedMessage);\n\n    } catch (error) {\n      console.error('Error emitting message:', error);\n      this.errorStream$.next(error as Error);\n    }\n  }\n\n  getActiveChannels(): ChannelType[] {\n    return Object.values(ChannelType);\n  }\n\n  // RoomManager implementation\n  async join(roomId: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!this.socket || !this.socket.connected) {\n        console.warn('Cannot join room: Socket not connected');\n        resolve(false);\n        return;\n      }\n\n      this.socket.emit('join_room', roomId, (success: boolean) => {\n        if (success) {\n          this.activeRooms.add(roomId);\n          console.log('Successfully joined room:', roomId);\n        } else {\n          console.warn('Failed to join room:', roomId);\n        }\n        resolve(success);\n      });\n    });\n  }\n\n  async leave(roomId: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!this.socket || !this.socket.connected) {\n        console.warn('Cannot leave room: Socket not connected');\n        resolve(false);\n        return;\n      }\n\n      this.socket.emit('leave_room', roomId, (success: boolean) => {\n        if (success) {\n          this.activeRooms.delete(roomId);\n          console.log('Successfully left room:', roomId);\n        } else {\n          console.warn('Failed to leave room:', roomId);\n        }\n        resolve(success);\n      });\n    });\n  }\n\n  getRooms(): Room[] {\n    return Array.from(this.activeRooms).map(id => ({\n      id,\n      name: id,\n      subscribers: 1 // Simplified - in a real app you'd track this\n    }));\n  }\n\n  isInRoom(roomId: string): boolean {\n    return this.activeRooms.has(roomId);\n  }\n\n  // ReconnectionHandler implementation\n  start(): void {\n    this.startReconnection();\n  }\n\n  stop(): void {\n    this.stopReconnection();\n  }\n\n  getAttempts(): number {\n    return this.reconnectionAttempts;\n  }\n\n  isReconnecting(): boolean {\n    return this.isReconnecting$.value;\n  }\n\n  // Private helper methods\n  private getChannelStream(channel: ChannelType): Observable<SocketMessage> {\n    switch (channel) {\n      case ChannelType.SYS:\n        return this.sysMessages;\n      case ChannelType.APP:\n        return this.appMessages;\n      case ChannelType.UI:\n        return this.uiMessages;\n      default:\n        return this.messages.pipe(filter(msg => msg.channel === channel));\n    }\n  }\n\n  private startReconnection(): void {\n    if (this.isReconnecting$.value || this.reconnectionAttempts >= this.maxReconnectionAttempts) {\n      return;\n    }\n\n    this.isReconnecting$.next(true);\n    this.connectionStatus$.next('connecting');\n\n    // Exponential backoff\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectionAttempts), 30000);\n    \n    console.log(`Attempting reconnection in ${delay}ms (attempt ${this.reconnectionAttempts + 1})`);\n\n    this.reconnectionTimer = setTimeout(() => {\n      this.reconnectionAttempts++;\n      \n      if (this.socket) {\n        this.socket.connect();\n      }\n      \n      // If this attempt fails, the error handler will trigger another attempt\n      setTimeout(() => {\n        if (this.connectionStatus$.value !== 'connected') {\n          this.isReconnecting$.next(false);\n        }\n      }, 5000);\n      \n    }, delay);\n  }\n\n  private stopReconnection(): void {\n    if (this.reconnectionTimer) {\n      clearTimeout(this.reconnectionTimer);\n      this.reconnectionTimer = null;\n    }\n    this.isReconnecting$.next(false);\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    console.log('Disposing RxjsSocketBridge');\n    \n    this.destroy$.next();\n    this.destroy$.complete();\n    \n    this.disconnect();\n    \n    // Complete all subjects\n    this.connectionStatus$.complete();\n    this.messageStream$.complete();\n    this.errorStream$.complete();\n    this.bridgeEvents$.complete();\n    this.sysChannel$.complete();\n    this.appChannel$.complete();\n    this.uiChannel$.complete();\n    this.isReconnecting$.complete();\n  }\n}\n","size_bytes":13075},"src/app/core/services/demo.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, interval, Subscription } from 'rxjs';\nimport { DemoClient, DemoConfig } from '../../demo/demo-client';\n\nexport interface DemoScenario {\n  id: string;\n  name: string;\n  description: string;\n  duration: number;\n  messageTypes: string[];\n}\n\nexport interface DemoStatus {\n  isRunning: boolean;\n  isConnected: boolean;\n  currentScenario: string | null;\n  messageCount: number;\n  duration: number;\n  startTime: Date | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DemoService {\n  private demoClient: DemoClient | null = null;\n  private statusSubject = new BehaviorSubject<DemoStatus>({\n    isRunning: false,\n    isConnected: false,\n    currentScenario: null,\n    messageCount: 0,\n    duration: 0,\n    startTime: null\n  });\n\n  private updateSubscription: Subscription | null = null;\n\n  // Available demo scenarios\n  private scenarios: DemoScenario[] = [\n    {\n      id: 'basic',\n      name: 'Basic Communication',\n      description: 'Simple bot status updates and health checks',\n      duration: 60,\n      messageTypes: ['bot_status', 'health_check']\n    },\n    {\n      id: 'interactive',\n      name: 'Interactive Demo',\n      description: 'Simulated user interactions and responses',\n      duration: 120,\n      messageTypes: ['bot_status', 'user_actions', 'bot_commands']\n    },\n    {\n      id: 'stress_test',\n      name: 'Performance Test',\n      description: 'High-frequency messages for performance testing',\n      duration: 30,\n      messageTypes: ['bot_status', 'health_check', 'system_events', 'user_actions']\n    },\n    {\n      id: 'showcase',\n      name: 'Full Showcase',\n      description: 'Complete demonstration of all features',\n      duration: 180,\n      messageTypes: ['bot_status', 'health_check', 'user_actions', 'bot_commands', 'system_events']\n    }\n  ];\n\n  constructor() {\n    console.log('DemoService initialized');\n  }\n\n  /**\n   * Get available demo scenarios\n   */\n  getScenarios(): DemoScenario[] {\n    return [...this.scenarios];\n  }\n\n  /**\n   * Get current demo status\n   */\n  getStatus() {\n    return this.statusSubject.asObservable();\n  }\n\n  /**\n   * Start demo with specified scenario\n   */\n  async startDemo(scenarioId: string = 'basic', serverUrl: string = 'http://localhost:8000'): Promise<boolean> {\n    try {\n      console.log(`Starting demo scenario: ${scenarioId}`);\n      \n      const scenario = this.scenarios.find(s => s.id === scenarioId);\n      if (!scenario) {\n        console.error('Invalid scenario ID:', scenarioId);\n        return false;\n      }\n\n      // Stop existing demo if running\n      if (this.demoClient) {\n        await this.stopDemo();\n      }\n\n      // Create demo configuration\n      const config: DemoConfig = {\n        serverUrl,\n        scenarios: scenario.messageTypes,\n        messageInterval: this.getMessageInterval(scenarioId),\n        duration: scenario.duration\n      };\n\n      // Create and connect demo client\n      this.demoClient = new DemoClient(config);\n      const connected = await this.demoClient.connect();\n      \n      if (!connected) {\n        console.error('Failed to connect demo client');\n        this.updateStatus({ isConnected: false });\n        return false;\n      }\n\n      // Start the demo\n      this.demoClient.start();\n\n      // Update status\n      this.updateStatus({\n        isRunning: true,\n        isConnected: true,\n        currentScenario: scenarioId,\n        messageCount: 0,\n        duration: scenario.duration,\n        startTime: new Date()\n      });\n\n      // Start status monitoring\n      this.startStatusMonitoring();\n\n      // Auto-stop after duration\n      setTimeout(() => {\n        if (this.statusSubject.value.currentScenario === scenarioId) {\n          this.stopDemo();\n        }\n      }, scenario.duration * 1000);\n\n      console.log(`Demo started successfully: ${scenario.name}`);\n      return true;\n\n    } catch (error) {\n      console.error('Error starting demo:', error);\n      this.updateStatus({ \n        isRunning: false, \n        isConnected: false,\n        currentScenario: null \n      });\n      return false;\n    }\n  }\n\n  /**\n   * Stop the current demo\n   */\n  async stopDemo(): Promise<void> {\n    console.log('Stopping demo...');\n\n    // Stop status monitoring\n    if (this.updateSubscription) {\n      this.updateSubscription.unsubscribe();\n      this.updateSubscription = null;\n    }\n\n    // Stop and disconnect demo client\n    if (this.demoClient) {\n      this.demoClient.stop();\n      this.demoClient.disconnect();\n      this.demoClient = null;\n    }\n\n    // Update status\n    this.updateStatus({\n      isRunning: false,\n      isConnected: false,\n      currentScenario: null,\n      startTime: null\n    });\n\n    console.log('Demo stopped');\n  }\n\n  /**\n   * Check if demo is currently running\n   */\n  isRunning(): boolean {\n    return this.statusSubject.value.isRunning;\n  }\n\n  /**\n   * Check if demo client is connected\n   */\n  isConnected(): boolean {\n    return this.statusSubject.value.isConnected;\n  }\n\n  /**\n   * Get current message count\n   */\n  getMessageCount(): number {\n    return this.demoClient?.getMessageCount() || 0;\n  }\n\n  /**\n   * Get demo runtime\n   */\n  getRuntime(): number {\n    const status = this.statusSubject.value;\n    if (!status.startTime) return 0;\n    \n    return Math.floor((Date.now() - status.startTime.getTime()) / 1000);\n  }\n\n  /**\n   * Start monitoring demo status\n   */\n  private startStatusMonitoring(): void {\n    // Update status every second\n    this.updateSubscription = interval(1000).subscribe(() => {\n      if (this.demoClient) {\n        this.updateStatus({\n          messageCount: this.demoClient.getMessageCount(),\n          isConnected: this.demoClient.isConnected(),\n          isRunning: this.demoClient.isActive()\n        });\n      }\n    });\n  }\n\n  /**\n   * Get message interval based on scenario\n   */\n  private getMessageInterval(scenarioId: string): number {\n    switch (scenarioId) {\n      case 'basic':\n        return 2000; // 2 seconds\n      case 'interactive':\n        return 1500; // 1.5 seconds\n      case 'stress_test':\n        return 200;  // 0.2 seconds\n      case 'showcase':\n        return 1000; // 1 second\n      default:\n        return 1000;\n    }\n  }\n\n  /**\n   * Update status subject\n   */\n  private updateStatus(updates: Partial<DemoStatus>): void {\n    const currentStatus = this.statusSubject.value;\n    this.statusSubject.next({ ...currentStatus, ...updates });\n  }\n\n  /**\n   * Get demo statistics\n   */\n  getStatistics() {\n    const status = this.statusSubject.value;\n    const runtime = this.getRuntime();\n    \n    return {\n      ...status,\n      runtime,\n      messagesPerSecond: runtime > 0 ? (status.messageCount / runtime).toFixed(2) : '0',\n      efficiency: this.calculateEfficiency()\n    };\n  }\n\n  /**\n   * Calculate demo efficiency metric\n   */\n  private calculateEfficiency(): number {\n    const status = this.statusSubject.value;\n    const runtime = this.getRuntime();\n    \n    if (runtime === 0 || status.duration === 0) return 0;\n    \n    const expectedMessages = runtime * this.getExpectedMessageRate(status.currentScenario);\n    const actualMessages = status.messageCount;\n    \n    return Math.min(100, (actualMessages / expectedMessages) * 100);\n  }\n\n  /**\n   * Get expected message rate for scenario\n   */\n  private getExpectedMessageRate(scenarioId: string | null): number {\n    if (!scenarioId) return 0;\n    \n    const interval = this.getMessageInterval(scenarioId);\n    return 1000 / interval; // Messages per second\n  }\n\n  /**\n   * Restart current demo\n   */\n  async restartDemo(): Promise<boolean> {\n    const currentScenario = this.statusSubject.value.currentScenario;\n    if (!currentScenario) {\n      console.warn('No active demo to restart');\n      return false;\n    }\n\n    await this.stopDemo();\n    return this.startDemo(currentScenario);\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    console.log('Disposing DemoService');\n    \n    this.stopDemo();\n    this.statusSubject.complete();\n  }\n}\n","size_bytes":8012},"src/app/core/services/integration.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Subject } from 'rxjs';\nimport { takeUntil, filter, debounceTime } from 'rxjs/operators';\nimport * as THREE from 'three';\n\nimport { SocketService } from './socket.service';\nimport { ThreeSceneService } from '../../shared/three/three-scene.service';\nimport { TrajectoryManager } from '../../shared/three/trajectory-manager';\nimport { AnimationController } from '../../shared/three/animation-controller';\nimport { Bot } from '../../shared/models/bot.model';\nimport { SocketMessage, MessageType, BotStatusMessage, UserActionMessage, ChannelType } from '../bridge/interfaces';\n\nexport interface IntegrationState {\n  selectedBotIds: Set<string>;\n  highlightedBotId: string | null;\n  cameraTarget: THREE.Vector3 | null;\n  isAutoRotating: boolean;\n  syncEnabled: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IntegrationService {\n  private destroy$ = new Subject<void>();\n  \n  // State management\n  private state$ = new BehaviorSubject<IntegrationState>({\n    selectedBotIds: new Set(),\n    highlightedBotId: null,\n    cameraTarget: null,\n    isAutoRotating: false,\n    syncEnabled: true\n  });\n\n  // Bot positions cache\n  private botPositions = new Map<string, THREE.Vector3>();\n  private botMeshes = new Map<string, THREE.Object3D>();\n\n  constructor(\n    private socketService: SocketService,\n    private threeSceneService: ThreeSceneService,\n    private trajectoryManager: TrajectoryManager,\n    private animationController: AnimationController\n  ) {\n    console.log('IntegrationService initialized');\n    this.setupIntegration();\n  }\n\n  /**\n   * Initialize the integration between all services\n   */\n  private setupIntegration(): void {\n    // Subscribe to socket messages and create 3D animations\n    this.socketService.messages$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(message => {\n        this.handleSocketMessage(message);\n      });\n\n    // Subscribe to bot status updates\n    this.socketService.sysMessages$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(msg => msg.type === MessageType.BOT_STATUS)\n      )\n      .subscribe(msg => {\n        this.handleBotStatusUpdate(msg as BotStatusMessage);\n      });\n\n    // Subscribe to user actions\n    this.socketService.uiMessages$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(msg => msg.type === MessageType.USER_ACTION)\n      )\n      .subscribe(msg => {\n        this.handleUserAction(msg as UserActionMessage);\n      });\n\n    // Set up animation controller\n    this.animationController.start();\n  }\n\n  /**\n   * Handle incoming socket messages and create visual representations\n   */\n  private handleSocketMessage(message: SocketMessage): void {\n    if (!this.state$.value.syncEnabled) return;\n\n    // Create message particle animation\n    this.createMessageAnimation(message);\n  }\n\n  /**\n   * Create animated particle for message\n   */\n  private createMessageAnimation(message: SocketMessage): void {\n    const messageId = `msg_${message.id}`;\n    \n    // Determine direction and positions\n    let startPos: THREE.Vector3;\n    let endPos: THREE.Vector3;\n    \n    if (message.source && this.botPositions.has(message.source)) {\n      // Message from bot to center\n      startPos = this.botPositions.get(message.source)!.clone();\n      endPos = new THREE.Vector3(0, 0, 0);\n    } else if (message.target && this.botPositions.has(message.target)) {\n      // Message from center to bot\n      startPos = new THREE.Vector3(0, 0, 0);\n      endPos = this.botPositions.get(message.target)!.clone();\n    } else {\n      // Default: center to random bot or generic animation\n      startPos = new THREE.Vector3(0, 0, 0);\n      endPos = this.getRandomBotPosition();\n    }\n\n    // Create trajectory particle\n    const particle = this.trajectoryManager.createMessageParticle(\n      messageId,\n      startPos,\n      endPos,\n      message.channel,\n      this.getSpeedForChannel(message.channel)\n    );\n\n    if (particle) {\n      console.log(`Created message animation for ${message.type} on ${message.channel}`);\n    }\n  }\n\n  /**\n   * Handle bot status updates\n   */\n  private handleBotStatusUpdate(message: BotStatusMessage): void {\n    // Update 3D scene bot status\n    this.threeSceneService.updateBotStatus(message.botId, message.status);\n    \n    // Update bot position cache\n    if (message.position) {\n      const position = new THREE.Vector3(\n        message.position.x,\n        message.position.y,\n        message.position.z\n      );\n      this.botPositions.set(message.botId, position);\n    }\n\n    // Create status change animation\n    this.animateBotStatusChange(message.botId, message.status);\n  }\n\n  /**\n   * Handle user action messages\n   */\n  private handleUserAction(message: UserActionMessage): void {\n    switch (message.action) {\n      case 'bot_selected':\n        this.handleBotSelection(message.data);\n        break;\n      case 'scene_reset':\n        this.resetScene();\n        break;\n      case 'filter_changed':\n        this.handleFilterChange(message.data);\n        break;\n    }\n  }\n\n  /**\n   * Handle bot selection from UI\n   */\n  private handleBotSelection(data: any): void {\n    const { botId, selected } = data;\n    const currentState = this.state$.value;\n    const newSelectedIds = new Set(currentState.selectedBotIds);\n    \n    if (selected) {\n      newSelectedIds.add(botId);\n      this.highlightBot(botId);\n    } else {\n      newSelectedIds.delete(botId);\n      this.unhighlightBot(botId);\n    }\n    \n    this.updateState({\n      selectedBotIds: newSelectedIds,\n      highlightedBotId: selected ? botId : null\n    });\n  }\n\n  /**\n   * Highlight bot in 3D scene\n   */\n  private highlightBot(botId: string): void {\n    const botMesh = this.botMeshes.get(botId);\n    if (!botMesh) return;\n\n    // Create highlight animation\n    this.animationController.animateScale(\n      `highlight_${botId}`,\n      botMesh,\n      1.3,\n      {\n        duration: 0.5,\n        easing: 'easeOut',\n        loop: false\n      }\n    );\n\n    // Add glow effect\n    this.addGlowEffect(botMesh);\n    \n    console.log(`Highlighted bot: ${botId}`);\n  }\n\n  /**\n   * Remove highlight from bot\n   */\n  private unhighlightBot(botId: string): void {\n    const botMesh = this.botMeshes.get(botId);\n    if (!botMesh) return;\n\n    // Remove highlight animation\n    this.animationController.animateScale(\n      `unhighlight_${botId}`,\n      botMesh,\n      1.0,\n      {\n        duration: 0.3,\n        easing: 'easeIn'\n      }\n    );\n\n    // Remove glow effect\n    this.removeGlowEffect(botMesh);\n    \n    console.log(`Unhighlighted bot: ${botId}`);\n  }\n\n  /**\n   * Animate bot status change\n   */\n  private animateBotStatusChange(botId: string, status: string): void {\n    const botMesh = this.botMeshes.get(botId);\n    if (!botMesh) return;\n\n    // Create bounce animation for status change\n    this.animationController.createAnimation(\n      `status_change_${botId}`,\n      [\n        {\n          object: botMesh,\n          property: 'position.y',\n          startValue: botMesh.position.y,\n          endValue: botMesh.position.y + 0.5\n        }\n      ],\n      {\n        duration: 0.4,\n        easing: 'easeOut',\n        loop: false\n      }\n    );\n\n    // Return to original position\n    setTimeout(() => {\n      this.animationController.animateProperty(\n        `status_return_${botId}`,\n        botMesh,\n        'position.y',\n        botMesh.position.y - 0.5,\n        {\n          duration: 0.4,\n          easing: 'easeIn'\n        }\n      );\n    }, 400);\n  }\n\n  /**\n   * Add glow effect to object\n   */\n  private addGlowEffect(object: THREE.Object3D): void {\n    // Simple glow effect using emissive material\n    object.traverse((child) => {\n      if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n        child.material.emissive.setHex(0x404040);\n        child.material.emissiveIntensity = 0.3;\n      }\n    });\n  }\n\n  /**\n   * Remove glow effect from object\n   */\n  private removeGlowEffect(object: THREE.Object3D): void {\n    object.traverse((child) => {\n      if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n        child.material.emissive.setHex(0x000000);\n        child.material.emissiveIntensity = 0;\n      }\n    });\n  }\n\n  /**\n   * Reset scene to initial state\n   */\n  private resetScene(): void {\n    console.log('Resetting integrated scene');\n    \n    // Clear all animations\n    this.animationController.clearAll();\n    \n    // Clear all trajectories\n    this.trajectoryManager.clearAllParticles();\n    \n    // Reset Three.js scene\n    this.threeSceneService.reset();\n    \n    // Reset integration state\n    this.updateState({\n      selectedBotIds: new Set(),\n      highlightedBotId: null,\n      cameraTarget: null,\n      isAutoRotating: false\n    });\n  }\n\n  /**\n   * Handle filter changes\n   */\n  private handleFilterChange(data: any): void {\n    // This could filter visible particles or adjust visualization\n    console.log('Filter changed:', data);\n  }\n\n  /**\n   * Update bot positions from Three.js scene\n   */\n  setBotPositions(positions: Map<string, THREE.Vector3>): void {\n    this.botPositions = new Map(positions);\n    console.log(`Updated ${positions.size} bot positions`);\n  }\n\n  /**\n   * Update bot mesh references\n   */\n  setBotMeshes(meshes: Map<string, THREE.Object3D>): void {\n    this.botMeshes = new Map(meshes);\n    console.log(`Updated ${meshes.size} bot mesh references`);\n  }\n\n  /**\n   * Initialize trajectory manager with scene\n   */\n  initializeTrajectoryManager(scene: THREE.Scene): void {\n    this.trajectoryManager.setScene(scene);\n    console.log('Trajectory manager initialized with scene');\n  }\n\n  /**\n   * Update method to be called in render loop\n   */\n  update(deltaTime: number): void {\n    // Update animations\n    this.animationController.update();\n    \n    // Update trajectories\n    this.trajectoryManager.updateParticles(deltaTime);\n  }\n\n  /**\n   * Get random bot position for generic animations\n   */\n  private getRandomBotPosition(): THREE.Vector3 {\n    const positions = Array.from(this.botPositions.values());\n    if (positions.length === 0) {\n      return new THREE.Vector3(5, 0, 0); // Default position\n    }\n    return positions[Math.floor(Math.random() * positions.length)].clone();\n  }\n\n  /**\n   * Get animation speed based on channel\n   */\n  private getSpeedForChannel(channel: ChannelType): number {\n    switch (channel) {\n      case ChannelType.SYS:\n        return 2.0; // Fast for system messages\n      case ChannelType.APP:\n        return 1.0; // Normal speed\n      case ChannelType.UI:\n        return 1.5; // Slightly fast for UI interactions\n      default:\n        return 1.0;\n    }\n  }\n\n  /**\n   * Update integration state\n   */\n  private updateState(updates: Partial<IntegrationState>): void {\n    const currentState = this.state$.value;\n    this.state$.next({ ...currentState, ...updates });\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return this.state$.asObservable();\n  }\n\n  /**\n   * Toggle synchronization\n   */\n  toggleSync(): void {\n    const currentState = this.state$.value;\n    this.updateState({ syncEnabled: !currentState.syncEnabled });\n    console.log('Sync toggled:', !currentState.syncEnabled);\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    return {\n      activeAnimations: this.animationController.getActiveAnimations().length,\n      activeParticles: this.trajectoryManager.getActiveParticleCount(),\n      totalAnimations: this.animationController.getAnimationCount$(),\n      syncEnabled: this.state$.value.syncEnabled\n    };\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    console.log('Disposing IntegrationService');\n    \n    this.destroy$.next();\n    this.destroy$.complete();\n    \n    this.animationController.dispose();\n    this.trajectoryManager.dispose();\n    \n    this.state$.complete();\n  }\n}\n","size_bytes":11901},"src/app/core/services/socket.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { RxjsSocketBridge } from '../bridge/rxjs-socket-bridge';\nimport { \n  SocketMessage, \n  ChannelType, \n  MessageType, \n  BotStatusMessage,\n  BotCommandMessage,\n  ConnectionConfig \n} from '../bridge/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocketService {\n  \n  constructor(private bridge: RxjsSocketBridge) {\n    console.log('SocketService initialized');\n  }\n\n  // Connection management\n  connect(config?: ConnectionConfig): void {\n    this.bridge.connect(config);\n  }\n\n  disconnect(): void {\n    this.bridge.disconnect();\n  }\n\n  // Observable streams\n  get connectionStatus$(): Observable<string> {\n    return this.bridge.connectionStatus;\n  }\n\n  get messages$(): Observable<SocketMessage> {\n    return this.bridge.messages;\n  }\n\n  get sysMessages$(): Observable<SocketMessage> {\n    return this.bridge.sysMessages;\n  }\n\n  get appMessages$(): Observable<SocketMessage> {\n    return this.bridge.appMessages;\n  }\n\n  get uiMessages$(): Observable<SocketMessage> {\n    return this.bridge.uiMessages;\n  }\n\n  get errors$(): Observable<Error> {\n    return this.bridge.errors;\n  }\n\n  get isReconnecting$(): Observable<boolean> {\n    return this.bridge.isReconnecting;\n  }\n\n  // Message emission helpers\n  sendBotCommand(botId: string, command: 'start' | 'stop' | 'reset' | 'configure', params?: Record<string, any>): void {\n    const message: BotCommandMessage = {\n      id: `cmd_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now(),\n      channel: ChannelType.APP,\n      type: MessageType.BOT_COMMAND,\n      botId,\n      command,\n      params\n    };\n\n    this.bridge.emit(ChannelType.APP, message);\n  }\n\n  sendUserAction(action: string, data?: Record<string, any>): void {\n    const message: SocketMessage = {\n      id: `action_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now(),\n      channel: ChannelType.UI,\n      type: MessageType.USER_ACTION,\n      action,\n      data\n    };\n\n    this.bridge.emit(ChannelType.UI, message);\n  }\n\n  // Room management\n  async joinRoom(roomId: string): Promise<boolean> {\n    return this.bridge.join(roomId);\n  }\n\n  async leaveRoom(roomId: string): Promise<boolean> {\n    return this.bridge.leave(roomId);\n  }\n\n  // Utility methods\n  isConnected(): boolean {\n    // Simple check - in a real app you might want more sophisticated logic\n    return this.bridge.connectionStatus !== undefined;\n  }\n\n  getConnectionAttempts(): number {\n    return this.bridge.getAttempts();\n  }\n}\n","size_bytes":2583},"src/app/features/bot-management/bot-list.component.css":{"content":".bot-list-panel {\n  width: 100%;\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.panel-header h3 {\n  margin: 0;\n  font-size: 1.1em;\n  font-weight: 600;\n}\n\n.selection-info {\n  font-size: 0.8em;\n  color: #bbb;\n}\n\n.bulk-actions {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 12px;\n  padding: 8px;\n  background: rgba(52, 152, 219, 0.1);\n  border-radius: 4px;\n  border: 1px solid rgba(52, 152, 219, 0.3);\n}\n\n.selection-controls {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.btn-small {\n  padding: 4px 8px;\n  font-size: 0.8em;\n  min-width: auto;\n}\n\n.bot-list {\n  flex: 1;\n  overflow-y: auto;\n  max-height: 400px;\n}\n\n.bot-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  margin: 4px 0;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n  border-left: 4px solid transparent;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  user-select: none;\n}\n\n.bot-list-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateX(2px);\n}\n\n.bot-list-item.selected {\n  border-left-color: #3498db;\n  background: rgba(52, 152, 219, 0.2);\n}\n\n.bot-info {\n  display: flex;\n  align-items: center;\n  flex: 1;\n}\n\n.bot-status {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  margin-right: 12px;\n  flex-shrink: 0;\n}\n\n.bot-status.online {\n  background: #2ecc71;\n  box-shadow: 0 0 10px rgba(46, 204, 113, 0.5);\n}\n\n.bot-status.offline {\n  background: #e74c3c;\n}\n\n.bot-status.processing {\n  background: #f39c12;\n  animation: pulse 1.5s ease-in-out infinite alternate;\n}\n\n.bot-details {\n  flex: 1;\n}\n\n.bot-name {\n  font-weight: 500;\n  font-size: 0.9em;\n  margin-bottom: 2px;\n}\n\n.bot-id {\n  font-size: 0.7em;\n  color: #bbb;\n  font-family: 'Courier New', monospace;\n  margin-bottom: 4px;\n}\n\n.bot-meta {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 0.7em;\n}\n\n.status-text {\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-weight: 500;\n}\n\n.bot-list-item .status-text {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.bot-list-item.selected .status-text {\n  background: rgba(52, 152, 219, 0.3);\n}\n\n.message-count {\n  color: #3498db;\n}\n\n.bot-actions {\n  display: flex;\n  gap: 4px;\n  flex-shrink: 0;\n}\n\n.bot-actions .btn {\n  min-width: 28px;\n  height: 28px;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.8em;\n}\n\n.empty-state {\n  text-align: center;\n  padding: 40px 20px;\n  color: #666;\n}\n\n.empty-state small {\n  display: block;\n  margin-top: 8px;\n  font-size: 0.8em;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .bot-list-item {\n    flex-direction: column;\n    align-items: stretch;\n    gap: 8px;\n  }\n  \n  .bot-actions {\n    justify-content: center;\n  }\n  \n  .bulk-actions {\n    flex-direction: column;\n  }\n}\n\n/* Track by function for performance */\n.bot-list-item {\n  /* Ensure smooth animations */\n  will-change: transform, background-color;\n}\n","size_bytes":3092},"src/app/features/bot-management/bot-list.component.ts":{"content":"import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\nimport { SocketService } from '../../core/services/socket.service';\nimport { Bot } from '../../shared/models/bot.model';\nimport { SocketMessage, MessageType, BotStatusMessage, ChannelType } from '../../core/bridge/interfaces';\n\n@Component({\n  selector: 'app-bot-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bot-list.component.html',\n  styleUrls: ['./bot-list.component.css']\n})\nexport class BotListComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  \n  bots: Bot[] = [];\n  selectedBotIds = new Set<string>();\n\n  constructor(private socketService: SocketService) {}\n\n  ngOnInit() {\n    console.log('BotListComponent initializing...');\n    \n    // Initialize default bots (8 positions on cardinal spirals)\n    this.initializeBots();\n    \n    // Subscribe to bot status messages\n    this.socketService.sysMessages$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(msg => msg.type === MessageType.BOT_STATUS)\n      )\n      .subscribe((msg: BotStatusMessage) => {\n        this.updateBotStatus(msg);\n      });\n\n    // Subscribe to app messages for bot responses\n    this.socketService.appMessages$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(msg => {\n        console.log('Bot app message:', msg);\n      });\n  }\n\n  private initializeBots(): void {\n    // Create 8 bots positioned on cardinal spirals (N, S, E, W - 2 each)\n    const cardinals = [\n      { name: 'North', angle: 0, positions: 2 },\n      { name: 'East', angle: Math.PI / 2, positions: 2 },\n      { name: 'South', angle: Math.PI, positions: 2 },\n      { name: 'West', angle: 3 * Math.PI / 2, positions: 2 }\n    ];\n\n    this.bots = [];\n    \n    cardinals.forEach((cardinal, cardinalIndex) => {\n      for (let i = 0; i < cardinal.positions; i++) {\n        const botId = `bot_${cardinal.name.toLowerCase()}_${i + 1}`;\n        \n        // Calculate spiral position\n        const radius = 5 + (i * 2); // Spiral outward\n        const angle = cardinal.angle + (i * 0.3); // Slight angle offset for spiral\n        \n        const bot: Bot = {\n          id: botId,\n          name: `${cardinal.name} Bot ${i + 1}`,\n          status: 'offline',\n          position: {\n            x: Math.cos(angle) * radius,\n            y: 0,\n            z: Math.sin(angle) * radius\n          },\n          lastActive: null,\n          messageCount: 0\n        };\n        \n        this.bots.push(bot);\n      }\n    });\n\n    console.log('Initialized bots:', this.bots);\n  }\n\n  private updateBotStatus(message: BotStatusMessage): void {\n    const bot = this.bots.find(b => b.id === message.botId);\n    if (bot) {\n      bot.status = message.status;\n      bot.lastActive = new Date();\n      \n      if (message.position) {\n        bot.position = message.position;\n      }\n      \n      console.log('Updated bot status:', bot);\n    }\n  }\n\n  onBotClick(bot: Bot): void {\n    if (this.selectedBotIds.has(bot.id)) {\n      this.selectedBotIds.delete(bot.id);\n    } else {\n      this.selectedBotIds.add(bot.id);\n    }\n    \n    // Send user action to Socket.io\n    this.socketService.sendUserAction('bot_selected', {\n      botId: bot.id,\n      selected: this.selectedBotIds.has(bot.id)\n    });\n    \n    console.log('Bot clicked:', bot.id, 'Selected:', this.selectedBotIds.has(bot.id));\n  }\n\n  startBot(bot: Bot, event: Event): void {\n    event.stopPropagation();\n    \n    console.log('Starting bot:', bot.id);\n    this.socketService.sendBotCommand(bot.id, 'start');\n  }\n\n  stopBot(bot: Bot, event: Event): void {\n    event.stopPropagation();\n    \n    console.log('Stopping bot:', bot.id);\n    this.socketService.sendBotCommand(bot.id, 'stop');\n  }\n\n  resetBot(bot: Bot, event: Event): void {\n    event.stopPropagation();\n    \n    console.log('Resetting bot:', bot.id);\n    this.socketService.sendBotCommand(bot.id, 'reset');\n  }\n\n  startAllSelected(): void {\n    this.selectedBotIds.forEach(botId => {\n      this.socketService.sendBotCommand(botId, 'start');\n    });\n    console.log('Started all selected bots');\n  }\n\n  stopAllSelected(): void {\n    this.selectedBotIds.forEach(botId => {\n      this.socketService.sendBotCommand(botId, 'stop');\n    });\n    console.log('Stopped all selected bots');\n  }\n\n  selectAll(): void {\n    this.selectedBotIds.clear();\n    this.bots.forEach(bot => this.selectedBotIds.add(bot.id));\n  }\n\n  deselectAll(): void {\n    this.selectedBotIds.clear();\n  }\n\n  isSelected(bot: Bot): boolean {\n    return this.selectedBotIds.has(bot.id);\n  }\n\n  getSelectedCount(): number {\n    return this.selectedBotIds.size;\n  }\n\n  ngOnDestroy() {\n    console.log('BotListComponent destroying...');\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","size_bytes":4865},"src/app/features/message-panel/message-panel.component.css":{"content":".message-panel {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.panel-header h3 {\n  margin: 0;\n  font-size: 1.1em;\n  font-weight: 600;\n}\n\n.message-count {\n  font-size: 0.8em;\n  color: #bbb;\n  font-family: 'Courier New', monospace;\n}\n\n.filter-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n  padding: 8px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 4px;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n\n.filter-buttons {\n  display: flex;\n  gap: 4px;\n}\n\n.filter-btn {\n  padding: 4px 8px;\n  font-size: 0.8em;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  background: rgba(255, 255, 255, 0.05);\n  color: #ccc;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.filter-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  border-color: rgba(255, 255, 255, 0.3);\n}\n\n.filter-btn.active {\n  background: rgba(52, 152, 219, 0.3);\n  border-color: #3498db;\n  color: #fff;\n}\n\n.control-buttons {\n  display: flex;\n  gap: 4px;\n}\n\n.scroll-controls {\n  margin-bottom: 12px;\n  padding: 4px 0;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 0.8em;\n  cursor: pointer;\n  user-select: none;\n}\n\n.checkbox-label input[type=\"checkbox\"] {\n  margin: 0;\n}\n\n.message-list {\n  flex: 1;\n  overflow-y: auto;\n  max-height: 350px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-radius: 4px;\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.message-list.auto-scroll {\n  scroll-behavior: smooth;\n}\n\n.message-item {\n  padding: 8px 12px;\n  margin: 2px 0;\n  border-radius: 4px;\n  font-size: 0.85em;\n  border-left: 3px solid;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  animation: slideIn 0.3s ease-out;\n}\n\n.message-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateX(2px);\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(-10px);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.message-sys {\n  border-left-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.message-app {\n  border-left-color: #3498db;\n  background: rgba(52, 152, 219, 0.1);\n}\n\n.message-ui {\n  border-left-color: #2ecc71;\n  background: rgba(46, 204, 113, 0.1);\n}\n\n.message-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n  font-size: 0.7em;\n  color: #bbb;\n}\n\n.message-time {\n  font-family: 'Courier New', monospace;\n  color: #888;\n}\n\n.message-channel {\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1px 4px;\n  border-radius: 2px;\n  font-weight: 500;\n}\n\n.message-type {\n  color: #999;\n  font-style: italic;\n}\n\n.message-content {\n  line-height: 1.4;\n  margin-bottom: 4px;\n  word-wrap: break-word;\n}\n\n.message-meta {\n  display: flex;\n  gap: 12px;\n  font-size: 0.7em;\n  color: #777;\n  margin-top: 4px;\n}\n\n.message-source,\n.message-target {\n  font-family: 'Courier New', monospace;\n}\n\n.empty-state {\n  text-align: center;\n  padding: 40px 20px;\n  color: #666;\n}\n\n.empty-state small {\n  display: block;\n  margin-top: 8px;\n  font-size: 0.8em;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .filter-controls {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .filter-buttons,\n  .control-buttons {\n    justify-content: center;\n  }\n  \n  .message-header {\n    flex-wrap: wrap;\n  }\n  \n  .message-list {\n    max-height: 250px;\n  }\n}\n\n/* Scrollbar styles */\n.message-list::-webkit-scrollbar {\n  width: 6px;\n}\n\n.message-list::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.05);\n}\n\n.message-list::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 3px;\n}\n\n.message-list::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n","size_bytes":3904},"src/app/features/message-panel/message-panel.component.ts":{"content":"import { Component, OnInit, OnDestroy, ElementRef, ViewChild, AfterViewInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil, scan } from 'rxjs/operators';\n\nimport { SocketService } from '../../core/services/socket.service';\nimport { Message } from '../../shared/models/message.model';\nimport { SocketMessage, ChannelType, MessageType } from '../../core/bridge/interfaces';\n\n@Component({\n  selector: 'app-message-panel',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './message-panel.component.html',\n  styleUrls: ['./message-panel.component.css']\n})\nexport class MessagePanelComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewChild('messageContainer', { static: false }) messageContainer!: ElementRef;\n  \n  private destroy$ = new Subject<void>();\n  \n  messages: Message[] = [];\n  filteredMessages: Message[] = [];\n  \n  // Filter state\n  activeFilters = {\n    sys: true,\n    app: true,\n    ui: true\n  };\n  \n  maxMessages = 100; // Limit to prevent memory issues\n  autoScroll = true;\n  \n  // Stats\n  messageStats = {\n    total: 0,\n    sys: 0,\n    app: 0,\n    ui: 0\n  };\n\n  constructor(private socketService: SocketService) {}\n\n  ngOnInit() {\n    console.log('MessagePanelComponent initializing...');\n    \n    // Subscribe to all messages\n    this.socketService.messages$\n      .pipe(\n        takeUntil(this.destroy$),\n        scan((messages: Message[], socketMessage: SocketMessage) => {\n          const message = this.convertSocketMessageToMessage(socketMessage);\n          const updatedMessages = [...messages, message];\n          \n          // Keep only the last N messages\n          if (updatedMessages.length > this.maxMessages) {\n            updatedMessages.splice(0, updatedMessages.length - this.maxMessages);\n          }\n          \n          return updatedMessages;\n        }, [])\n      )\n      .subscribe(messages => {\n        this.messages = messages;\n        this.updateStats();\n        this.applyFilters();\n        this.scrollToBottomIfNeeded();\n      });\n  }\n\n  ngAfterViewInit() {\n    // Initial scroll to bottom\n    setTimeout(() => this.scrollToBottom(), 100);\n  }\n\n  private convertSocketMessageToMessage(socketMessage: SocketMessage): Message {\n    return {\n      id: socketMessage.id,\n      timestamp: new Date(socketMessage.timestamp),\n      channel: socketMessage.channel,\n      type: socketMessage.type,\n      content: this.formatMessageContent(socketMessage),\n      source: socketMessage.source,\n      target: socketMessage.target,\n      data: socketMessage\n    };\n  }\n\n  private formatMessageContent(socketMessage: SocketMessage): string {\n    switch (socketMessage.type) {\n      case MessageType.BOT_STATUS:\n        const botStatus = socketMessage as any;\n        return `Bot ${botStatus.botId} is now ${botStatus.status}`;\n        \n      case MessageType.BOT_COMMAND:\n        const botCommand = socketMessage as any;\n        return `Command \"${botCommand.command}\" sent to bot ${botCommand.botId}`;\n        \n      case MessageType.HEALTH_CHECK:\n        const health = socketMessage as any;\n        return `System Health - CPU: ${health.systemHealth?.cpu}%, Memory: ${health.systemHealth?.memory}%, Connections: ${health.systemHealth?.connections}`;\n        \n      case MessageType.USER_ACTION:\n        const userAction = socketMessage as any;\n        return `User action: ${userAction.action}`;\n        \n      case MessageType.SYSTEM_EVENT:\n        const systemEvent = socketMessage as any;\n        return `${systemEvent.severity.toUpperCase()}: ${systemEvent.event}`;\n        \n      default:\n        return `${socketMessage.type} message`;\n    }\n  }\n\n  private updateStats(): void {\n    this.messageStats = {\n      total: this.messages.length,\n      sys: this.messages.filter(m => m.channel === ChannelType.SYS).length,\n      app: this.messages.filter(m => m.channel === ChannelType.APP).length,\n      ui: this.messages.filter(m => m.channel === ChannelType.UI).length\n    };\n  }\n\n  private applyFilters(): void {\n    this.filteredMessages = this.messages.filter(message => {\n      return this.activeFilters[message.channel as keyof typeof this.activeFilters];\n    });\n  }\n\n  private scrollToBottomIfNeeded(): void {\n    if (this.autoScroll && this.messageContainer) {\n      setTimeout(() => this.scrollToBottom(), 0);\n    }\n  }\n\n  private scrollToBottom(): void {\n    if (this.messageContainer) {\n      const container = this.messageContainer.nativeElement;\n      container.scrollTop = container.scrollHeight;\n    }\n  }\n\n  // Filter methods\n  toggleFilter(channel: keyof typeof this.activeFilters): void {\n    this.activeFilters[channel] = !this.activeFilters[channel];\n    this.applyFilters();\n    console.log('Filter toggled:', channel, this.activeFilters[channel]);\n  }\n\n  clearAllFilters(): void {\n    this.activeFilters = { sys: false, app: false, ui: false };\n    this.applyFilters();\n  }\n\n  showAllFilters(): void {\n    this.activeFilters = { sys: true, app: true, ui: true };\n    this.applyFilters();\n  }\n\n  // Message actions\n  clearMessages(): void {\n    this.messages = [];\n    this.filteredMessages = [];\n    this.updateStats();\n    console.log('Messages cleared');\n  }\n\n  toggleAutoScroll(): void {\n    this.autoScroll = !this.autoScroll;\n    console.log('Auto-scroll:', this.autoScroll);\n  }\n\n  onMessageClick(message: Message): void {\n    console.log('Message clicked:', message);\n    \n    // Send user action\n    this.socketService.sendUserAction('message_clicked', {\n      messageId: message.id,\n      channel: message.channel,\n      type: message.type\n    });\n  }\n\n  // Utility methods\n  getChannelClass(channel: ChannelType): string {\n    return `message-${channel}`;\n  }\n\n  getTimeString(date: Date): string {\n    return date.toLocaleTimeString();\n  }\n\n  trackMessage(index: number, message: Message): string {\n    return message.id;\n  }\n\n  isFilterActive(channel: keyof typeof this.activeFilters): boolean {\n    return this.activeFilters[channel];\n  }\n\n  getFilteredCount(): number {\n    return this.filteredMessages.length;\n  }\n\n  ngOnDestroy() {\n    console.log('MessagePanelComponent destroying...');\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","size_bytes":6217},"src/app/shared/models/bot.model.ts":{"content":"export interface Bot {\n  id: string;\n  name: string;\n  status: 'online' | 'offline' | 'processing';\n  position: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  lastActive: Date | null;\n  messageCount: number;\n}\n\nexport interface BotCommand {\n  id: string;\n  botId: string;\n  command: 'start' | 'stop' | 'reset' | 'configure';\n  timestamp: Date;\n  params?: Record<string, any>;\n}\n\nexport interface BotMetrics {\n  botId: string;\n  uptime: number;\n  messagesSent: number;\n  messagesReceived: number;\n  lastPing: Date;\n  performance: {\n    cpu: number;\n    memory: number;\n    latency: number;\n  };\n}\n","size_bytes":603},"src/app/shared/models/message.model.ts":{"content":"import { ChannelType, MessageType, SocketMessage } from '../../core/bridge/interfaces';\n\nexport interface Message {\n  id: string;\n  timestamp: Date;\n  channel: ChannelType;\n  type: MessageType;\n  content: string;\n  source?: string;\n  target?: string;\n  data?: SocketMessage; // Original socket message data\n}\n\nexport interface MessageFilter {\n  channels: ChannelType[];\n  types: MessageType[];\n  dateRange?: {\n    from: Date;\n    to: Date;\n  };\n  searchQuery?: string;\n}\n\nexport interface MessageStats {\n  total: number;\n  byChannel: Record<ChannelType, number>;\n  byType: Record<MessageType, number>;\n  avgPerMinute: number;\n  peak: {\n    count: number;\n    timestamp: Date;\n  };\n}\n","size_bytes":683},"src/app/shared/three/animation-controller.ts":{"content":"import * as THREE from 'three';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nexport interface AnimationConfig {\n  duration: number;\n  easing: 'linear' | 'easeIn' | 'easeOut' | 'easeInOut';\n  loop: boolean;\n  autoStart: boolean;\n}\n\nexport interface AnimationTarget {\n  object: THREE.Object3D;\n  property: string;\n  startValue: any;\n  endValue: any;\n  currentValue?: any;\n}\n\nexport interface Animation {\n  id: string;\n  targets: AnimationTarget[];\n  config: AnimationConfig;\n  progress: number;\n  isPlaying: boolean;\n  startTime: number;\n  onComplete?: () => void;\n  onUpdate?: (progress: number) => void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnimationController {\n  private animations = new Map<string, Animation>();\n  private clock = new THREE.Clock();\n  private isRunning = false;\n  \n  // Animation state observables\n  private animationCount$ = new BehaviorSubject<number>(0);\n  private performanceStats$ = new BehaviorSubject<{\n    activeAnimations: number;\n    totalAnimations: number;\n    averageFrameTime: number;\n  }>({\n    activeAnimations: 0,\n    totalAnimations: 0,\n    averageFrameTime: 0\n  });\n\n  // Performance tracking\n  private frameCount = 0;\n  private totalFrameTime = 0;\n  private lastFrameTime = 0;\n\n  constructor() {\n    console.log('AnimationController initialized');\n  }\n\n  /**\n   * Start the animation update loop\n   */\n  start(): void {\n    if (this.isRunning) return;\n    \n    this.isRunning = true;\n    this.clock.start();\n    console.log('Animation controller started');\n  }\n\n  /**\n   * Stop the animation update loop\n   */\n  stop(): void {\n    this.isRunning = false;\n    console.log('Animation controller stopped');\n  }\n\n  /**\n   * Update all active animations\n   */\n  update(): void {\n    if (!this.isRunning) return;\n\n    const startTime = performance.now();\n    const deltaTime = this.clock.getDelta();\n    const currentTime = this.clock.elapsedTime;\n\n    const animationsToRemove: string[] = [];\n\n    // Update each animation\n    this.animations.forEach((animation, id) => {\n      if (!animation.isPlaying) return;\n\n      // Calculate progress\n      const elapsed = currentTime - animation.startTime;\n      animation.progress = Math.min(elapsed / animation.config.duration, 1.0);\n\n      // Apply easing\n      const easedProgress = this.applyEasing(animation.progress, animation.config.easing);\n\n      // Update all targets\n      animation.targets.forEach(target => {\n        this.updateAnimationTarget(target, easedProgress);\n      });\n\n      // Call update callback\n      if (animation.onUpdate) {\n        animation.onUpdate(animation.progress);\n      }\n\n      // Check if animation completed\n      if (animation.progress >= 1.0) {\n        if (animation.config.loop) {\n          // Restart animation\n          animation.startTime = currentTime;\n          animation.progress = 0;\n        } else {\n          // Mark for removal\n          animationsToRemove.push(id);\n          \n          // Call completion callback\n          if (animation.onComplete) {\n            animation.onComplete();\n          }\n        }\n      }\n    });\n\n    // Remove completed animations\n    animationsToRemove.forEach(id => {\n      this.animations.delete(id);\n    });\n\n    // Update performance stats\n    this.updatePerformanceStats(performance.now() - startTime);\n    this.animationCount$.next(this.animations.size);\n  }\n\n  /**\n   * Create a new animation\n   */\n  createAnimation(\n    id: string,\n    targets: AnimationTarget[],\n    config: Partial<AnimationConfig> = {}\n  ): Animation {\n    const fullConfig: AnimationConfig = {\n      duration: 1.0,\n      easing: 'easeInOut',\n      loop: false,\n      autoStart: true,\n      ...config\n    };\n\n    // Initialize target start values\n    targets.forEach(target => {\n      if (target.startValue === undefined) {\n        target.startValue = this.getObjectProperty(target.object, target.property);\n      }\n      target.currentValue = target.startValue;\n    });\n\n    const animation: Animation = {\n      id,\n      targets,\n      config: fullConfig,\n      progress: 0,\n      isPlaying: fullConfig.autoStart,\n      startTime: this.clock.elapsedTime\n    };\n\n    this.animations.set(id, animation);\n    \n    console.log(`Created animation: ${id}`);\n    return animation;\n  }\n\n  /**\n   * Animate object property\n   */\n  animateProperty(\n    id: string,\n    object: THREE.Object3D,\n    property: string,\n    endValue: any,\n    config?: Partial<AnimationConfig>\n  ): Animation {\n    const target: AnimationTarget = {\n      object,\n      property,\n      startValue: this.getObjectProperty(object, property),\n      endValue\n    };\n\n    return this.createAnimation(id, [target], config);\n  }\n\n  /**\n   * Animate position\n   */\n  animatePosition(\n    id: string,\n    object: THREE.Object3D,\n    targetPosition: THREE.Vector3,\n    config?: Partial<AnimationConfig>\n  ): Animation {\n    const targets: AnimationTarget[] = [\n      {\n        object,\n        property: 'position.x',\n        startValue: object.position.x,\n        endValue: targetPosition.x\n      },\n      {\n        object,\n        property: 'position.y',\n        startValue: object.position.y,\n        endValue: targetPosition.y\n      },\n      {\n        object,\n        property: 'position.z',\n        startValue: object.position.z,\n        endValue: targetPosition.z\n      }\n    ];\n\n    return this.createAnimation(id, targets, config);\n  }\n\n  /**\n   * Animate rotation\n   */\n  animateRotation(\n    id: string,\n    object: THREE.Object3D,\n    targetRotation: THREE.Euler,\n    config?: Partial<AnimationConfig>\n  ): Animation {\n    const targets: AnimationTarget[] = [\n      {\n        object,\n        property: 'rotation.x',\n        startValue: object.rotation.x,\n        endValue: targetRotation.x\n      },\n      {\n        object,\n        property: 'rotation.y',\n        startValue: object.rotation.y,\n        endValue: targetRotation.y\n      },\n      {\n        object,\n        property: 'rotation.z',\n        startValue: object.rotation.z,\n        endValue: targetRotation.z\n      }\n    ];\n\n    return this.createAnimation(id, targets, config);\n  }\n\n  /**\n   * Animate scale\n   */\n  animateScale(\n    id: string,\n    object: THREE.Object3D,\n    targetScale: THREE.Vector3 | number,\n    config?: Partial<AnimationConfig>\n  ): Animation {\n    const scale = typeof targetScale === 'number' \n      ? new THREE.Vector3(targetScale, targetScale, targetScale)\n      : targetScale;\n\n    const targets: AnimationTarget[] = [\n      {\n        object,\n        property: 'scale.x',\n        startValue: object.scale.x,\n        endValue: scale.x\n      },\n      {\n        object,\n        property: 'scale.y',\n        startValue: object.scale.y,\n        endValue: scale.y\n      },\n      {\n        object,\n        property: 'scale.z',\n        startValue: object.scale.z,\n        endValue: scale.z\n      }\n    ];\n\n    return this.createAnimation(id, targets, config);\n  }\n\n  /**\n   * Play animation\n   */\n  play(id: string): boolean {\n    const animation = this.animations.get(id);\n    if (animation) {\n      animation.isPlaying = true;\n      animation.startTime = this.clock.elapsedTime - (animation.progress * animation.config.duration);\n      console.log(`Playing animation: ${id}`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Pause animation\n   */\n  pause(id: string): boolean {\n    const animation = this.animations.get(id);\n    if (animation) {\n      animation.isPlaying = false;\n      console.log(`Paused animation: ${id}`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Stop animation\n   */\n  stopAnimation(id: string): boolean {\n    const animation = this.animations.get(id);\n    if (animation) {\n      animation.isPlaying = false;\n      animation.progress = 0;\n      animation.startTime = this.clock.elapsedTime;\n      \n      // Reset to start values\n      animation.targets.forEach(target => {\n        this.setObjectProperty(target.object, target.property, target.startValue);\n      });\n      \n      console.log(`Stopped animation: ${id}`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Remove animation\n   */\n  removeAnimation(id: string): boolean {\n    const removed = this.animations.delete(id);\n    if (removed) {\n      console.log(`Removed animation: ${id}`);\n      this.animationCount$.next(this.animations.size);\n    }\n    return removed;\n  }\n\n  /**\n   * Get animation by ID\n   */\n  getAnimation(id: string): Animation | undefined {\n    return this.animations.get(id);\n  }\n\n  /**\n   * Check if animation exists and is playing\n   */\n  isAnimationPlaying(id: string): boolean {\n    const animation = this.animations.get(id);\n    return animation ? animation.isPlaying : false;\n  }\n\n  /**\n   * Get all active animations\n   */\n  getActiveAnimations(): Animation[] {\n    return Array.from(this.animations.values()).filter(anim => anim.isPlaying);\n  }\n\n  /**\n   * Clear all animations\n   */\n  clearAll(): void {\n    console.log(`Clearing ${this.animations.size} animations`);\n    this.animations.clear();\n    this.animationCount$.next(0);\n  }\n\n  /**\n   * Update animation target\n   */\n  private updateAnimationTarget(target: AnimationTarget, progress: number): void {\n    const { startValue, endValue } = target;\n    \n    if (typeof startValue === 'number' && typeof endValue === 'number') {\n      // Numeric interpolation\n      target.currentValue = startValue + (endValue - startValue) * progress;\n    } else if (startValue instanceof THREE.Vector3 && endValue instanceof THREE.Vector3) {\n      // Vector3 interpolation\n      target.currentValue = startValue.clone().lerp(endValue, progress);\n    } else if (startValue instanceof THREE.Color && endValue instanceof THREE.Color) {\n      // Color interpolation\n      target.currentValue = startValue.clone().lerp(endValue, progress);\n    } else {\n      // Fallback - direct assignment at 50% progress\n      target.currentValue = progress < 0.5 ? startValue : endValue;\n    }\n\n    // Apply the value to the object\n    this.setObjectProperty(target.object, target.property, target.currentValue);\n  }\n\n  /**\n   * Apply easing function to progress\n   */\n  private applyEasing(progress: number, easing: string): number {\n    switch (easing) {\n      case 'linear':\n        return progress;\n      case 'easeIn':\n        return progress * progress;\n      case 'easeOut':\n        return 1 - Math.pow(1 - progress, 2);\n      case 'easeInOut':\n        return progress < 0.5 \n          ? 2 * progress * progress \n          : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n      default:\n        return progress;\n    }\n  }\n\n  /**\n   * Get object property by path\n   */\n  private getObjectProperty(object: any, path: string): any {\n    const parts = path.split('.');\n    let current = object;\n    \n    for (const part of parts) {\n      if (current && typeof current === 'object' && part in current) {\n        current = current[part];\n      } else {\n        return undefined;\n      }\n    }\n    \n    return current;\n  }\n\n  /**\n   * Set object property by path\n   */\n  private setObjectProperty(object: any, path: string, value: any): void {\n    const parts = path.split('.');\n    let current = object;\n    \n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      if (current && typeof current === 'object' && part in current) {\n        current = current[part];\n      } else {\n        return;\n      }\n    }\n    \n    const lastPart = parts[parts.length - 1];\n    if (current && typeof current === 'object' && lastPart in current) {\n      current[lastPart] = value;\n    }\n  }\n\n  /**\n   * Update performance statistics\n   */\n  private updatePerformanceStats(frameTime: number): void {\n    this.frameCount++;\n    this.totalFrameTime += frameTime;\n    \n    // Update stats every 60 frames\n    if (this.frameCount % 60 === 0) {\n      const averageFrameTime = this.totalFrameTime / this.frameCount;\n      \n      this.performanceStats$.next({\n        activeAnimations: this.getActiveAnimations().length,\n        totalAnimations: this.animations.size,\n        averageFrameTime\n      });\n      \n      // Reset counters\n      this.frameCount = 0;\n      this.totalFrameTime = 0;\n    }\n  }\n\n  /**\n   * Get observable for animation count\n   */\n  getAnimationCount$() {\n    return this.animationCount$.asObservable();\n  }\n\n  /**\n   * Get observable for performance stats\n   */\n  getPerformanceStats$() {\n    return this.performanceStats$.asObservable();\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    console.log('Disposing AnimationController');\n    this.stop();\n    this.clearAll();\n    this.animationCount$.complete();\n    this.performanceStats$.complete();\n  }\n}\n","size_bytes":12633},"src/app/shared/three/three-scene.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject, interval } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThreeSceneService {\n  private destroy$ = new Subject<void>();\n  \n  // Three.js core objects\n  private scene: THREE.Scene | null = null;\n  private camera: THREE.PerspectiveCamera | null = null;\n  private renderer: THREE.WebGLRenderer | null = null;\n  private controls: OrbitControls | null = null;\n  \n  // Scene objects\n  private centralHub: THREE.Mesh | null = null;\n  private botPositions: THREE.Mesh[] = [];\n  private gridHelper: THREE.GridHelper | null = null;\n  \n  // Animation and performance\n  private animationId: number | null = null;\n  private clock = new THREE.Clock();\n  private fps$ = new BehaviorSubject<number>(0);\n  \n  // Scene state\n  private isInitialized = false;\n  private lastFrameTime = 0;\n  private frameCount = 0;\n  \n  // Public observables\n  public readonly fps = this.fps$.asObservable();\n\n  constructor() {\n    console.log('ThreeSceneService initialized');\n  }\n\n  /**\n   * Initialize the Three.js scene\n   */\n  async initialize(container: HTMLElement): Promise<void> {\n    try {\n      console.log('Initializing Three.js scene...');\n      \n      // Create scene\n      this.scene = new THREE.Scene();\n      this.scene.background = new THREE.Color(0x0a0a0a);\n      this.scene.fog = new THREE.Fog(0x0a0a0a, 10, 100);\n      \n      // Create camera\n      const aspect = container.clientWidth / container.clientHeight;\n      this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\n      this.camera.position.set(0, 8, 12);\n      \n      // Create renderer\n      this.renderer = new THREE.WebGLRenderer({ \n        antialias: true,\n        alpha: true,\n        powerPreference: 'high-performance'\n      });\n      this.renderer.setSize(container.clientWidth, container.clientHeight);\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n      this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n      this.renderer.toneMappingExposure = 1;\n      \n      // Add canvas to container\n      container.appendChild(this.renderer.domElement);\n      \n      // Create controls\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true;\n      this.controls.dampingFactor = 0.05;\n      this.controls.screenSpacePanning = false;\n      this.controls.minDistance = 3;\n      this.controls.maxDistance = 50;\n      this.controls.maxPolarAngle = Math.PI / 2;\n      \n      // Set up lights\n      this.setupLighting();\n      \n      // Create scene objects\n      this.createCentralHub();\n      this.createBotPositions();\n      this.createEnvironment();\n      \n      // Set up resize handling\n      this.setupResizeHandler(container);\n      \n      this.isInitialized = true;\n      console.log('Three.js scene initialized successfully');\n      \n    } catch (error) {\n      console.error('Failed to initialize Three.js scene:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Set up scene lighting\n   */\n  private setupLighting(): void {\n    if (!this.scene) return;\n    \n    // Ambient light\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3);\n    this.scene.add(ambientLight);\n    \n    // Main directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 5);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    directionalLight.shadow.camera.near = 0.5;\n    directionalLight.shadow.camera.far = 50;\n    this.scene.add(directionalLight);\n    \n    // Fill light\n    const fillLight = new THREE.DirectionalLight(0x4488ff, 0.2);\n    fillLight.position.set(-10, 5, -5);\n    this.scene.add(fillLight);\n    \n    // Rim light\n    const rimLight = new THREE.DirectionalLight(0xff8844, 0.1);\n    rimLight.position.set(0, -10, 10);\n    this.scene.add(rimLight);\n  }\n\n  /**\n   * Create the central Socket.io hub\n   */\n  private createCentralHub(): void {\n    if (!this.scene) return;\n    \n    // Central sphere geometry\n    const geometry = new THREE.SphereGeometry(1.5, 32, 32);\n    \n    // Glowing material with emission\n    const material = new THREE.MeshStandardMaterial({\n      color: 0x3498db,\n      emissive: 0x1a5490,\n      emissiveIntensity: 0.3,\n      metalness: 0.1,\n      roughness: 0.2\n    });\n    \n    this.centralHub = new THREE.Mesh(geometry, material);\n    this.centralHub.position.set(0, 0, 0);\n    this.centralHub.castShadow = true;\n    this.centralHub.userData = { type: 'central_hub' };\n    \n    this.scene.add(this.centralHub);\n    \n    // Add a subtle glow effect\n    const glowGeometry = new THREE.SphereGeometry(2, 16, 16);\n    const glowMaterial = new THREE.MeshBasicMaterial({\n      color: 0x3498db,\n      transparent: true,\n      opacity: 0.1\n    });\n    const glow = new THREE.Mesh(glowGeometry, glowMaterial);\n    this.centralHub.add(glow);\n    \n    console.log('Central hub created');\n  }\n\n  /**\n   * Create bot positions on cardinal spirals\n   */\n  private createBotPositions(): void {\n    if (!this.scene) return;\n    \n    // Define cardinal directions (N, S, E, W)\n    const cardinals = [\n      { name: 'North', angle: 0 },\n      { name: 'East', angle: Math.PI / 2 },\n      { name: 'South', angle: Math.PI },\n      { name: 'West', angle: 3 * Math.PI / 2 }\n    ];\n    \n    // Create 2 bot positions per cardinal direction\n    cardinals.forEach((cardinal, cardinalIndex) => {\n      for (let i = 0; i < 2; i++) {\n        const botIndex = cardinalIndex * 2 + i;\n        \n        // Calculate spiral position\n        const radius = 5 + (i * 2); // Spiral outward\n        const angle = cardinal.angle + (i * 0.3); // Slight angle offset\n        const height = i * 0.5; // Slight height variation\n        \n        const position = new THREE.Vector3(\n          Math.cos(angle) * radius,\n          height,\n          Math.sin(angle) * radius\n        );\n        \n        // Create bot marker\n        const geometry = new THREE.ConeGeometry(0.3, 1.2, 8);\n        const material = new THREE.MeshStandardMaterial({\n          color: 0x95a5a6, // Default inactive color\n          metalness: 0.3,\n          roughness: 0.7\n        });\n        \n        const botMesh = new THREE.Mesh(geometry, material);\n        botMesh.position.copy(position);\n        botMesh.castShadow = true;\n        botMesh.receiveShadow = true;\n        \n        // Store bot data\n        botMesh.userData = {\n          type: 'bot_position',\n          botId: `bot_${cardinal.name.toLowerCase()}_${i + 1}`,\n          cardinal: cardinal.name,\n          index: i,\n          position: position.clone()\n        };\n        \n        this.botPositions.push(botMesh);\n        this.scene.add(botMesh);\n        \n        // Add position marker (ring around bot)\n        const ringGeometry = new THREE.RingGeometry(0.8, 1.2, 16);\n        const ringMaterial = new THREE.MeshBasicMaterial({\n          color: 0x34495e,\n          transparent: true,\n          opacity: 0.3,\n          side: THREE.DoubleSide\n        });\n        const ring = new THREE.Mesh(ringGeometry, ringMaterial);\n        ring.rotation.x = -Math.PI / 2;\n        ring.position.copy(position);\n        ring.position.y = 0.1;\n        \n        this.scene.add(ring);\n      }\n    });\n    \n    console.log(`Created ${this.botPositions.length} bot positions`);\n  }\n\n  /**\n   * Create environment helpers\n   */\n  private createEnvironment(): void {\n    if (!this.scene) return;\n    \n    // Grid helper\n    this.gridHelper = new THREE.GridHelper(20, 20, 0x444444, 0x222222);\n    this.gridHelper.material.transparent = true;\n    this.gridHelper.material.opacity = 0.3;\n    this.scene.add(this.gridHelper);\n    \n    // Axes helper (for development)\n    const axesHelper = new THREE.AxesHelper(3);\n    axesHelper.material.transparent = true;\n    axesHelper.material.opacity = 0.5;\n    this.scene.add(axesHelper);\n    \n    console.log('Environment created');\n  }\n\n  /**\n   * Set up window resize handling\n   */\n  private setupResizeHandler(container: HTMLElement): void {\n    const resizeObserver = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        const { width, height } = entry.contentRect;\n        \n        if (this.camera && this.renderer) {\n          this.camera.aspect = width / height;\n          this.camera.updateProjectionMatrix();\n          this.renderer.setSize(width, height);\n        }\n      }\n    });\n    \n    resizeObserver.observe(container);\n    \n    // Clean up observer on destroy\n    this.destroy$.subscribe(() => {\n      resizeObserver.disconnect();\n    });\n  }\n\n  /**\n   * Start the render loop\n   */\n  startRenderLoop(): void {\n    if (!this.isInitialized) {\n      console.warn('Cannot start render loop: Scene not initialized');\n      return;\n    }\n    \n    console.log('Starting render loop...');\n    this.animate();\n    \n    // Start FPS monitoring\n    interval(1000).pipe(takeUntil(this.destroy$)).subscribe(() => {\n      const fps = this.frameCount;\n      this.fps$.next(fps);\n      this.frameCount = 0;\n    });\n  }\n\n  /**\n   * Animation loop\n   */\n  private animate = (): void => {\n    this.animationId = requestAnimationFrame(this.animate);\n    \n    const deltaTime = this.clock.getDelta();\n    this.frameCount++;\n    \n    // Update controls\n    if (this.controls) {\n      this.controls.update();\n    }\n    \n    // Animate central hub\n    if (this.centralHub) {\n      this.centralHub.rotation.y += deltaTime * 0.5;\n      \n      // Subtle pulsing effect\n      const pulse = Math.sin(this.clock.elapsedTime * 2) * 0.1;\n      this.centralHub.scale.setScalar(1 + pulse * 0.05);\n    }\n    \n    // Animate bot positions\n    this.botPositions.forEach((bot, index) => {\n      if (bot) {\n        // Gentle bobbing motion\n        const bobOffset = Math.sin(this.clock.elapsedTime * 1.5 + index * 0.3) * 0.1;\n        bot.position.y = bot.userData.position.y + bobOffset;\n        \n        // Subtle rotation\n        bot.rotation.y = this.clock.elapsedTime * 0.2 + index * 0.5;\n      }\n    });\n    \n    // Render the scene\n    if (this.scene && this.camera && this.renderer) {\n      this.renderer.render(this.scene, this.camera);\n    }\n  };\n\n  /**\n   * Update bot status visualization\n   */\n  updateBotStatus(botId: string, status: 'online' | 'offline' | 'processing'): void {\n    const botMesh = this.botPositions.find(bot => bot.userData.botId === botId);\n    \n    if (!botMesh) {\n      console.warn('Bot not found:', botId);\n      return;\n    }\n    \n    const material = botMesh.material as THREE.MeshStandardMaterial;\n    \n    switch (status) {\n      case 'online':\n        material.color.setHex(0x2ecc71); // Green\n        material.emissive.setHex(0x0a4015);\n        break;\n      case 'offline':\n        material.color.setHex(0x95a5a6); // Gray\n        material.emissive.setHex(0x000000);\n        break;\n      case 'processing':\n        material.color.setHex(0xf39c12); // Orange\n        material.emissive.setHex(0x4a3200);\n        break;\n    }\n    \n    console.log(`Updated bot ${botId} status to ${status}`);\n  }\n\n  /**\n   * Reset scene to initial state\n   */\n  reset(): void {\n    console.log('Resetting scene...');\n    \n    // Reset camera position\n    if (this.camera && this.controls) {\n      this.camera.position.set(0, 8, 12);\n      this.controls.reset();\n    }\n    \n    // Reset bot colors\n    this.botPositions.forEach(bot => {\n      if (bot) {\n        const material = bot.material as THREE.MeshStandardMaterial;\n        material.color.setHex(0x95a5a6);\n        material.emissive.setHex(0x000000);\n      }\n    });\n    \n    // Reset clock\n    this.clock.start();\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    console.log('Disposing Three.js scene...');\n    \n    this.destroy$.next();\n    this.destroy$.complete();\n    \n    // Stop animation loop\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n    \n    // Dispose of Three.js objects\n    if (this.renderer) {\n      this.renderer.dispose();\n      \n      // Remove canvas from DOM\n      if (this.renderer.domElement.parentNode) {\n        this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);\n      }\n    }\n    \n    if (this.controls) {\n      this.controls.dispose();\n    }\n    \n    // Dispose of geometries and materials\n    this.scene?.traverse((object) => {\n      if (object instanceof THREE.Mesh) {\n        object.geometry.dispose();\n        if (Array.isArray(object.material)) {\n          object.material.forEach(material => material.dispose());\n        } else {\n          object.material.dispose();\n        }\n      }\n    });\n    \n    // Clean up references\n    this.scene = null;\n    this.camera = null;\n    this.renderer = null;\n    this.controls = null;\n    this.centralHub = null;\n    this.botPositions = [];\n    this.gridHelper = null;\n    \n    this.fps$.complete();\n    \n    this.isInitialized = false;\n  }\n}\n","size_bytes":13201},"src/app/shared/three/trajectory-manager.ts":{"content":"import * as THREE from 'three';\nimport { Injectable } from '@angular/core';\n\nexport interface TrajectoryConfig {\n  startPosition: THREE.Vector3;\n  endPosition: THREE.Vector3;\n  curvature: number;\n  segments: number;\n}\n\nexport interface MessageParticle {\n  id: string;\n  position: THREE.Vector3;\n  targetPosition: THREE.Vector3;\n  curve: THREE.CubicBezierCurve3;\n  progress: number;\n  speed: number;\n  color: THREE.Color;\n  mesh: THREE.Mesh;\n  channel: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrajectoryManager {\n  private scene: THREE.Scene | null = null;\n  private activeParticles = new Map<string, MessageParticle>();\n  private particleGeometry: THREE.SphereGeometry | null = null;\n  private particleMaterials = new Map<string, THREE.MeshBasicMaterial>();\n  \n  // Channel colors\n  private channelColors = {\n    sys: new THREE.Color(0xff4444), // Red\n    app: new THREE.Color(0x4444ff), // Blue\n    ui: new THREE.Color(0x44ff44)   // Green\n  };\n\n  constructor() {\n    console.log('TrajectoryManager initialized');\n    this.initializeGeometry();\n    this.initializeMaterials();\n  }\n\n  /**\n   * Initialize particle geometry (reused for all particles)\n   */\n  private initializeGeometry(): void {\n    this.particleGeometry = new THREE.SphereGeometry(0.1, 8, 8);\n  }\n\n  /**\n   * Initialize materials for different channels\n   */\n  private initializeMaterials(): void {\n    Object.entries(this.channelColors).forEach(([channel, color]) => {\n      const material = new THREE.MeshBasicMaterial({\n        color: color,\n        transparent: true,\n        opacity: 0.8\n      });\n      this.particleMaterials.set(channel, material);\n    });\n  }\n\n  /**\n   * Set the Three.js scene reference\n   */\n  setScene(scene: THREE.Scene): void {\n    this.scene = scene;\n  }\n\n  /**\n   * Create a trajectory curve between two positions\n   */\n  createTrajectory(config: TrajectoryConfig): THREE.CubicBezierCurve3 {\n    const { startPosition, endPosition, curvature } = config;\n    \n    // Calculate control points for smooth curve\n    const midPoint = new THREE.Vector3()\n      .addVectors(startPosition, endPosition)\n      .multiplyScalar(0.5);\n    \n    // Add height for arc effect\n    midPoint.y += curvature;\n    \n    // Calculate direction for control points\n    const direction = new THREE.Vector3()\n      .subVectors(endPosition, startPosition)\n      .normalize();\n    \n    const perpendicular = new THREE.Vector3()\n      .crossVectors(direction, new THREE.Vector3(0, 1, 0))\n      .normalize()\n      .multiplyScalar(curvature * 0.5);\n    \n    const controlPoint1 = new THREE.Vector3()\n      .addVectors(startPosition, perpendicular)\n      .lerp(midPoint, 0.3);\n    \n    const controlPoint2 = new THREE.Vector3()\n      .subVectors(endPosition, perpendicular)\n      .lerp(midPoint, 0.3);\n    \n    return new THREE.CubicBezierCurve3(\n      startPosition,\n      controlPoint1,\n      controlPoint2,\n      endPosition\n    );\n  }\n\n  /**\n   * Create and launch a message particle\n   */\n  createMessageParticle(\n    id: string,\n    startPos: THREE.Vector3,\n    endPos: THREE.Vector3,\n    channel: string = 'app',\n    speed: number = 1.0\n  ): MessageParticle | null {\n    \n    if (!this.scene || !this.particleGeometry) {\n      console.warn('Scene or geometry not initialized');\n      return null;\n    }\n\n    // Create trajectory curve\n    const curve = this.createTrajectory({\n      startPosition: startPos.clone(),\n      endPosition: endPos.clone(),\n      curvature: 2.0,\n      segments: 50\n    });\n\n    // Get material for channel\n    const material = this.particleMaterials.get(channel) || \n                    this.particleMaterials.get('app')!;\n\n    // Create particle mesh\n    const mesh = new THREE.Mesh(this.particleGeometry, material.clone());\n    mesh.position.copy(startPos);\n    mesh.userData = { type: 'message_particle', id, channel };\n\n    // Add to scene\n    this.scene.add(mesh);\n\n    // Create particle object\n    const particle: MessageParticle = {\n      id,\n      position: startPos.clone(),\n      targetPosition: endPos.clone(),\n      curve,\n      progress: 0,\n      speed,\n      color: this.channelColors[channel as keyof typeof this.channelColors] || this.channelColors.app,\n      mesh,\n      channel\n    };\n\n    // Store active particle\n    this.activeParticles.set(id, particle);\n\n    console.log(`Created message particle: ${id} (${channel})`);\n    return particle;\n  }\n\n  /**\n   * Update all active particles\n   */\n  updateParticles(deltaTime: number): void {\n    const particlesToRemove: string[] = [];\n\n    this.activeParticles.forEach((particle, id) => {\n      // Update progress\n      particle.progress += deltaTime * particle.speed;\n\n      if (particle.progress >= 1.0) {\n        // Particle reached destination\n        particlesToRemove.push(id);\n        return;\n      }\n\n      // Update position along curve\n      const newPosition = particle.curve.getPoint(particle.progress);\n      particle.position.copy(newPosition);\n      particle.mesh.position.copy(newPosition);\n\n      // Add some visual effects\n      this.updateParticleEffects(particle, deltaTime);\n    });\n\n    // Remove completed particles\n    particlesToRemove.forEach(id => {\n      this.removeParticle(id);\n    });\n  }\n\n  /**\n   * Update visual effects for particle\n   */\n  private updateParticleEffects(particle: MessageParticle, deltaTime: number): void {\n    // Pulsing effect\n    const pulse = Math.sin(Date.now() * 0.01) * 0.3 + 0.7;\n    particle.mesh.scale.setScalar(pulse);\n\n    // Rotation\n    particle.mesh.rotation.x += deltaTime * 2;\n    particle.mesh.rotation.y += deltaTime * 3;\n\n    // Fade effect near end\n    if (particle.progress > 0.8) {\n      const fadeProgress = (particle.progress - 0.8) / 0.2;\n      const material = particle.mesh.material as THREE.MeshBasicMaterial;\n      material.opacity = 1 - fadeProgress;\n    }\n  }\n\n  /**\n   * Remove a particle from the scene\n   */\n  removeParticle(id: string): void {\n    const particle = this.activeParticles.get(id);\n    \n    if (particle && this.scene) {\n      // Remove mesh from scene\n      this.scene.remove(particle.mesh);\n      \n      // Dispose of material if it's a clone\n      if (particle.mesh.material !== this.particleMaterials.get(particle.channel)) {\n        (particle.mesh.material as THREE.Material).dispose();\n      }\n      \n      // Remove from active particles\n      this.activeParticles.delete(id);\n      \n      console.log(`Removed message particle: ${id}`);\n    }\n  }\n\n  /**\n   * Create trajectory for bot-to-center message\n   */\n  createBotToCenterTrajectory(\n    botPosition: THREE.Vector3,\n    messageId: string,\n    channel: string = 'app'\n  ): MessageParticle | null {\n    const centerPosition = new THREE.Vector3(0, 0, 0);\n    return this.createMessageParticle(\n      messageId,\n      botPosition,\n      centerPosition,\n      channel,\n      1.5 // Slightly faster for incoming messages\n    );\n  }\n\n  /**\n   * Create trajectory for center-to-bot message\n   */\n  createCenterToBotTrajectory(\n    botPosition: THREE.Vector3,\n    messageId: string,\n    channel: string = 'app'\n  ): MessageParticle | null {\n    const centerPosition = new THREE.Vector3(0, 0, 0);\n    return this.createMessageParticle(\n      messageId,\n      centerPosition,\n      botPosition,\n      channel,\n      1.0 // Normal speed for outgoing messages\n    );\n  }\n\n  /**\n   * Get active particle count\n   */\n  getActiveParticleCount(): number {\n    return this.activeParticles.size;\n  }\n\n  /**\n   * Clear all particles\n   */\n  clearAllParticles(): void {\n    console.log(`Clearing ${this.activeParticles.size} active particles`);\n    \n    const particleIds = Array.from(this.activeParticles.keys());\n    particleIds.forEach(id => {\n      this.removeParticle(id);\n    });\n  }\n\n  /**\n   * Get particles by channel\n   */\n  getParticlesByChannel(channel: string): MessageParticle[] {\n    return Array.from(this.activeParticles.values())\n      .filter(particle => particle.channel === channel);\n  }\n\n  /**\n   * Update channel color\n   */\n  updateChannelColor(channel: string, color: THREE.Color): void {\n    this.channelColors[channel as keyof typeof this.channelColors] = color;\n    \n    // Update material\n    const material = this.particleMaterials.get(channel);\n    if (material) {\n      material.color.copy(color);\n    }\n    \n    // Update existing particles of this channel\n    this.activeParticles.forEach(particle => {\n      if (particle.channel === channel) {\n        (particle.mesh.material as THREE.MeshBasicMaterial).color.copy(color);\n      }\n    });\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    console.log('Disposing TrajectoryManager');\n    \n    // Clear all particles\n    this.clearAllParticles();\n    \n    // Dispose of geometry\n    if (this.particleGeometry) {\n      this.particleGeometry.dispose();\n    }\n    \n    // Dispose of materials\n    this.particleMaterials.forEach(material => {\n      material.dispose();\n    });\n    \n    this.particleMaterials.clear();\n    this.scene = null;\n  }\n}\n","size_bytes":8979}},"version":1}